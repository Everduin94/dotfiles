"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _unistUtilMap = _interopRequireDefault(require("unist-util-map"));

var LINK_REGEX = /^\[\[(.+?)\]\]/;

function locator(value, fromIndex) {
  return value.indexOf('[', fromIndex);
}

function wikiLinkPlugin() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var permalinks = opts.permalinks || [];

  var defaultPageResolver = function defaultPageResolver(name) {
    return [name.replace(/ /g, '_').toLowerCase()];
  };

  var pageResolver = opts.pageResolver || defaultPageResolver;
  var newClassName = opts.newClassName || 'new';
  var wikiLinkClassName = opts.wikiLinkClassName || 'internal';

  var defaultHrefTemplate = function defaultHrefTemplate(permalink) {
    return "#/page/".concat(permalink);
  };

  var hrefTemplate = opts.hrefTemplate || defaultHrefTemplate;
  var aliasDivider = opts.aliasDivider || ":";

  function isAlias(pageTitle) {
    return pageTitle.indexOf(aliasDivider) !== -1;
  }

  function parseAliasLink(pageTitle) {
    var _pageTitle$split = pageTitle.split(aliasDivider),
        _pageTitle$split2 = (0, _slicedToArray2["default"])(_pageTitle$split, 2),
        name = _pageTitle$split2[0],
        displayName = _pageTitle$split2[1];

    return {
      name: name,
      displayName: displayName
    };
  }

  function parsePageTitle(pageTitle) {
    if (isAlias(pageTitle)) {
      return parseAliasLink(pageTitle);
    }

    return {
      name: pageTitle,
      displayName: pageTitle
    };
  }

  function inlineTokenizer(eat, value) {
    var match = LINK_REGEX.exec(value);

    if (match) {
      var pageName = match[1].trim();

      var _parsePageTitle = parsePageTitle(pageName),
          name = _parsePageTitle.name,
          displayName = _parsePageTitle.displayName;

      var pagePermalinks = pageResolver(name);
      var permalink = pagePermalinks.find(function (p) {
        return permalinks.indexOf(p) != -1;
      });
      var exists = permalink != undefined;

      if (!exists) {
        permalink = pagePermalinks[0];
      }

      var classNames = wikiLinkClassName;

      if (!exists) {
        classNames += ' ' + newClassName;
      }

      return eat(match[0])({
        type: 'wikiLink',
        value: name,
        data: {
          alias: displayName,
          permalink: permalink,
          exists: exists,
          hName: 'a',
          hProperties: {
            className: classNames,
            href: hrefTemplate(permalink)
          },
          hChildren: [{
            type: 'text',
            value: displayName
          }]
        }
      });
    }
  }

  inlineTokenizer.locator = locator;
  var Parser = this.Parser;
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.wikiLink = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('link'), 0, 'wikiLink'); // Stringify for wiki link

  var Compiler = this.Compiler;

  if (Compiler != null) {
    var visitors = Compiler.prototype.visitors;

    if (visitors) {
      visitors.wikiLink = function (node) {
        if (node.data.alias != node.value) {
          return "[[".concat(node.value).concat(aliasDivider).concat(node.data.alias, "]]");
        }

        return "[[".concat(node.value, "]]");
      };
    }
  }
}

module.exports = wikiLinkPlugin;