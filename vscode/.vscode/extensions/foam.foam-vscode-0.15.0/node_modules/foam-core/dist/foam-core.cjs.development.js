'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var paths = require('path');
var micromatch = _interopDefault(require('micromatch'));
var fs = require('fs');
var fs__default = _interopDefault(fs);
var glob = _interopDefault(require('glob'));
var util = require('util');
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var titleCase = require('title-case');
require('crypto');
var fastArrayDiff = require('fast-array-diff');
var lodash = require('lodash');
var unified = _interopDefault(require('unified'));
var markdownParse = _interopDefault(require('remark-parse'));
var wikiLinkPlugin = _interopDefault(require('remark-wiki-link'));
var frontmatterPlugin = _interopDefault(require('remark-frontmatter'));
var yaml = require('yaml');
var visit = _interopDefault(require('unist-util-visit'));
var detectNewline = _interopDefault(require('detect-newline'));
var os = _interopDefault(require('os'));
var GithubSlugger = _interopDefault(require('github-slugger'));

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var _nodeProcess, _nodeProcess$versions;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// taken from https://github.com/microsoft/vscode/tree/master/src/vs/base/common
var LANGUAGE_DEFAULT = 'en';
var _isWindows = false;
var _isMacintosh = false;
var _isLinux = false;
var _isIOS = false;
var _locale = undefined;
var _language = LANGUAGE_DEFAULT;
var _translationsConfigFile = undefined;
var _userAgent = undefined;

var _globals = typeof self === 'object' ? self : typeof global === 'object' ? global : {};

var nodeProcess = undefined;

if (typeof process !== 'undefined') {
  // Native environment (non-sandboxed)
  nodeProcess = process;
} else if (typeof _globals.vscode !== 'undefined') {
  // Native environment (sandboxed)
  nodeProcess = _globals.vscode.process;
}

var isElectronRenderer = typeof ((_nodeProcess = nodeProcess) === null || _nodeProcess === void 0 ? void 0 : (_nodeProcess$versions = _nodeProcess.versions) === null || _nodeProcess$versions === void 0 ? void 0 : _nodeProcess$versions.electron) === 'string' && nodeProcess.type === 'renderer';

if (typeof navigator === 'object' && !isElectronRenderer) {
  _userAgent = navigator.userAgent;
  _isWindows = /*#__PURE__*/_userAgent.indexOf('Windows') >= 0 || /*#__PURE__*/_userAgent.indexOf('win32') >= 0;
  _isMacintosh = /*#__PURE__*/_userAgent.indexOf('Macintosh') >= 0;
  _isIOS = ( /*#__PURE__*/_userAgent.indexOf('Macintosh') >= 0 || /*#__PURE__*/_userAgent.indexOf('iPad') >= 0 || /*#__PURE__*/_userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;
  _isLinux = /*#__PURE__*/_userAgent.indexOf('Linux') >= 0;
  _locale = navigator.language;
  _language = _locale;
} // Native environment
else if (typeof nodeProcess === 'object') {
    _isWindows = nodeProcess.platform === 'win32';
    _isMacintosh = nodeProcess.platform === 'darwin';
    _isLinux = nodeProcess.platform === 'linux';
    _locale = LANGUAGE_DEFAULT;
    _language = LANGUAGE_DEFAULT;
    var rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];

    if (rawNlsConfig) {
      try {
        var nlsConfig = /*#__PURE__*/JSON.parse(rawNlsConfig);
        var resolved = nlsConfig.availableLanguages['*'];
        _locale = nlsConfig.locale; // VSCode's default language is 'en'

        _language = resolved ? resolved : LANGUAGE_DEFAULT;
        _translationsConfigFile = nlsConfig._translationsConfigFile;
      } catch (e) {}
    }
  } // Unknown environment
  else {
      console.error('Unable to resolve platform.');
    }

var isWindows = _isWindows;
/**
 * The language used for the user interface. The format of
 * the string is all lower case (e.g. zh-tw for Traditional
 * Chinese)
 */

var language = _language;
var Language;

(function (Language) {
  function value() {
    return language;
  }

  Language.value = value;

  function isDefaultVariant() {
    if (language.length === 2) {
      return language === 'en';
    } else if (language.length >= 3) {
      return language[0] === 'e' && language[1] === 'n' && language[2] === '-';
    } else {
      return false;
    }
  }

  Language.isDefaultVariant = isDefaultVariant;

  function isDefault() {
    return language === 'en';
  }

  Language.isDefault = isDefault;
})(Language || (Language = {}));

var _encodeTable;
var posix = paths.posix;
var _empty = '';
var _slash = '/';
var _regexp = /^(([^:/?#]{2,}?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
var URI = /*#__PURE__*/function () {
  function URI() {}

  URI.create = function create(from) {
    var _from$scheme, _from$authority, _from$path, _from$query, _from$fragment;

    return {
      scheme: (_from$scheme = from.scheme) !== null && _from$scheme !== void 0 ? _from$scheme : _empty,
      authority: (_from$authority = from.authority) !== null && _from$authority !== void 0 ? _from$authority : _empty,
      path: (_from$path = from.path) !== null && _from$path !== void 0 ? _from$path : _empty,
      query: (_from$query = from.query) !== null && _from$query !== void 0 ? _from$query : _empty,
      fragment: (_from$fragment = from.fragment) !== null && _from$fragment !== void 0 ? _from$fragment : _empty
    };
  };

  URI.parse = function parse(value) {
    var _match$, _match$2, _match$3, _match$4;

    var match = _regexp.exec(value);

    if (!match) {
      return URI.create({});
    }

    return URI.create({
      scheme: match[2] || 'file',
      authority: percentDecode((_match$ = match[4]) !== null && _match$ !== void 0 ? _match$ : _empty),
      path: percentDecode((_match$2 = match[5]) !== null && _match$2 !== void 0 ? _match$2 : _empty),
      query: percentDecode((_match$3 = match[7]) !== null && _match$3 !== void 0 ? _match$3 : _empty),
      fragment: percentDecode((_match$4 = match[9]) !== null && _match$4 !== void 0 ? _match$4 : _empty)
    });
  }
  /**
   * Parses a URI from value, taking into consideration possible relative paths.
   *
   * @param reference the URI to use as reference in case value is a relative path
   * @param value the value to parse for a URI
   * @returns the URI from the given value. In case of a relative path, the URI will take into account
   * the reference from which it is computed
   */
  ;

  URI.resolve = function resolve(value, reference) {
    var uri = URI.parse(value);

    if (uri.scheme === 'file' && !value.startsWith('/')) {
      var _value$split = value.split('#'),
          path = _value$split[0],
          fragment = _value$split[1];

      uri = path.length > 0 ? URI.computeRelativeURI(reference, path) : reference;

      if (fragment) {
        uri = URI.create(_extends({}, uri, {
          fragment: fragment
        }));
      }
    }

    return uri;
  };

  URI.computeRelativeURI = function computeRelativeURI(reference, relativeSlug) {
    // if no extension is provided, use the same extension as the source file
    var slug = posix.extname(relativeSlug) !== '' ? relativeSlug : "" + relativeSlug + posix.extname(reference.path);
    return URI.create(_extends({}, reference, {
      path: posix.join(posix.dirname(reference.path), slug)
    }));
  };

  URI.file = function file(path) {
    var authority = _empty; // normalize to fwd-slashes on windows,
    // on other systems bwd-slashes are valid
    // filename character, eg /f\oo/ba\r.txt

    if (isWindows) {
      if (path.startsWith(_slash)) {
        path = "" + path.replace(/\\/g, _slash);
      } else {
        path = "/" + path.replace(/\\/g, _slash);
      }
    } // check for authority as used in UNC shares
    // or use the path as given


    if (path[0] === _slash && path[1] === _slash) {
      var idx = path.indexOf(_slash, 2);

      if (idx === -1) {
        authority = path.substring(2);
        path = _slash;
      } else {
        authority = path.substring(2, idx);
        path = path.substring(idx) || _slash;
      }
    }

    return URI.create({
      scheme: 'file',
      authority: authority,
      path: path
    });
  };

  URI.placeholder = function placeholder(key) {
    return URI.create({
      scheme: 'placeholder',
      path: key
    });
  };

  URI.relativePath = function relativePath(source, target) {
    var relativePath = posix.relative(posix.dirname(source.path), target.path);
    return relativePath;
  };

  URI.getBasename = function getBasename(uri) {
    return posix.parse(uri.path).name;
  };

  URI.getDir = function getDir(uri) {
    return URI.file(posix.dirname(uri.path));
  };

  URI.getFileNameWithoutExtension = function getFileNameWithoutExtension(uri) {
    return URI.getBasename(uri).replace(/\.[^.]+$/, '');
  }
  /**
   * Uses a placeholder URI, and a reference directory, to generate
   * the URI of the corresponding resource
   *
   * @param placeholderUri the placeholder URI
   * @param basedir the dir to be used as reference
   * @returns the target resource URI
   */
  ;

  URI.createResourceUriFromPlaceholder = function createResourceUriFromPlaceholder(basedir, placeholderUri) {
    var tokens = placeholderUri.path.split('/');
    var path = tokens.slice(0, -1);
    var filename = tokens.slice(-1);
    return URI.joinPath.apply(URI, [basedir].concat(path, [filename + ".md"]));
  }
  /**
   * Join a URI path with path fragments and normalizes the resulting path.
   *
   * @param uri The input URI.
   * @param pathFragment The path fragment to add to the URI path.
   * @returns The resulting URI.
   */
  ;

  URI.joinPath = function joinPath(uri) {
    if (!uri.path) {
      throw new Error("[UriError]: cannot call joinPath on URI without path");
    }

    var newPath;

    for (var _len = arguments.length, pathFragment = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      pathFragment[_key - 1] = arguments[_key];
    }

    if (isWindows && uri.scheme === 'file') {
      var _paths$win;

      newPath = URI.file((_paths$win = paths.win32).join.apply(_paths$win, [URI.toFsPath(uri)].concat(pathFragment))).path;
    } else {
      var _paths$posix;

      newPath = (_paths$posix = paths.posix).join.apply(_paths$posix, [uri.path].concat(pathFragment));
    }

    return URI.create(_extends({}, uri, {
      path: newPath
    }));
  };

  URI.toFsPath = function toFsPath(uri, keepDriveLetterCasing) {
    if (keepDriveLetterCasing === void 0) {
      keepDriveLetterCasing = true;
    }

    var value;

    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {
      // unc path: file://shares/c$/far/boo
      value = "//" + uri.authority + uri.path;
    } else if (uri.path.charCodeAt(0) === 47
    /* Slash */
    && (uri.path.charCodeAt(1) >= 65
    /* A */
    && uri.path.charCodeAt(1) <= 90
    /* Z */
    || uri.path.charCodeAt(1) >= 97
    /* a */
    && uri.path.charCodeAt(1) <= 122
    /* z */
    ) && uri.path.charCodeAt(2) === 58
    /* Colon */
    ) {
        if (!keepDriveLetterCasing) {
          // windows drive letter: file:///c:/far/boo
          value = uri.path[1].toLowerCase() + uri.path.substr(2);
        } else {
          value = uri.path.substr(1);
        }
      } else {
      // other path
      value = uri.path;
    }

    if (isWindows) {
      value = value.replace(/\//g, '\\');
    }

    return value;
  };

  URI.toString = function toString(uri) {
    return encode(uri, false);
  } // --- utility
  ;

  URI.isUri = function isUri(thing) {
    if (!thing) {
      return false;
    }

    return typeof thing.authority === 'string' && typeof thing.fragment === 'string' && typeof thing.path === 'string' && typeof thing.query === 'string' && typeof thing.scheme === 'string';
  };

  URI.isPlaceholder = function isPlaceholder(uri) {
    return uri.scheme === 'placeholder';
  };

  URI.isEqual = function isEqual(a, b) {
    return a.authority === b.authority && a.scheme === b.scheme && a.path === b.path && a.fragment === b.fragment && a.query === b.query;
  };

  URI.isMarkdownFile = function isMarkdownFile(uri) {
    return uri.path.endsWith('.md');
  };

  return URI;
}(); // --- encode / decode

function decodeURIComponentGraceful(str) {
  try {
    return decodeURIComponent(str);
  } catch (_unused) {
    if (str.length > 3) {
      return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));
    } else {
      return str;
    }
  }
}

var _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;

function percentDecode(str) {
  if (!str.match(_rEncodedAsHex)) {
    return str;
  }

  return str.replace(_rEncodedAsHex, function (match) {
    return decodeURIComponentGraceful(match);
  });
}
/**
 * Create the external version of a uri
 */


function encode(uri, skipEncoding) {
  var encoder = !skipEncoding ? encodeURIComponentFast : encodeURIComponentMinimal;
  var res = '';
  var scheme = uri.scheme,
      authority = uri.authority,
      path = uri.path,
      query = uri.query,
      fragment = uri.fragment;

  if (scheme) {
    res += scheme;
    res += ':';
  }

  if (authority || scheme === 'file') {
    res += _slash;
    res += _slash;
  }

  if (authority) {
    var idx = authority.indexOf('@');

    if (idx !== -1) {
      // <user>@<auth>
      var userinfo = authority.substr(0, idx);
      authority = authority.substr(idx + 1);
      idx = userinfo.indexOf(':');

      if (idx === -1) {
        res += encoder(userinfo, false);
      } else {
        // <user>:<pass>@<auth>
        res += encoder(userinfo.substr(0, idx), false);
        res += ':';
        res += encoder(userinfo.substr(idx + 1), false);
      }

      res += '@';
    }

    authority = authority.toLowerCase();
    idx = authority.indexOf(':');

    if (idx === -1) {
      res += encoder(authority, false);
    } else {
      // <auth>:<port>
      res += encoder(authority.substr(0, idx), false);
      res += authority.substr(idx);
    }
  }

  if (path) {
    // lower-case windows drive letters in /C:/fff or C:/fff
    if (path.length >= 3 && path.charCodeAt(0) === 47
    /* Slash */
    && path.charCodeAt(2) === 58
    /* Colon */
    ) {
        var code = path.charCodeAt(1);

        if (code >= 65
        /* A */
        && code <= 90
        /* Z */
        ) {
            path = "/" + String.fromCharCode(code + 32) + ":" + path.substr(3); // "/c:".length === 3
          }
      } else if (path.length >= 2 && path.charCodeAt(1) === 58
    /* Colon */
    ) {
        var _code = path.charCodeAt(0);

        if (_code >= 65
        /* A */
        && _code <= 90
        /* Z */
        ) {
            path = String.fromCharCode(_code + 32) + ":" + path.substr(2); // "/c:".length === 3
          }
      } // encode the rest of the path


    res += encoder(path, true);
  }

  if (query) {
    res += '?';
    res += encoder(query, false);
  }

  if (fragment) {
    res += '#';
    res += !skipEncoding ? encodeURIComponentFast(fragment, false) : fragment;
  }

  return res;
} // reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2


var encodeTable = (_encodeTable = {}, _encodeTable[58
/* Colon */
] = '%3A', _encodeTable[47
/* Slash */
] = '%2F', _encodeTable[63
/* QuestionMark */
] = '%3F', _encodeTable[35
/* Hash */
] = '%23', _encodeTable[91
/* OpenSquareBracket */
] = '%5B', _encodeTable[93
/* CloseSquareBracket */
] = '%5D', _encodeTable[64
/* AtSign */
] = '%40', _encodeTable[33
/* ExclamationMark */
] = '%21', _encodeTable[36
/* DollarSign */
] = '%24', _encodeTable[38
/* Ampersand */
] = '%26', _encodeTable[39
/* SingleQuote */
] = '%27', _encodeTable[40
/* OpenParen */
] = '%28', _encodeTable[41
/* CloseParen */
] = '%29', _encodeTable[42
/* Asterisk */
] = '%2A', _encodeTable[43
/* Plus */
] = '%2B', _encodeTable[44
/* Comma */
] = '%2C', _encodeTable[59
/* Semicolon */
] = '%3B', _encodeTable[61
/* Equals */
] = '%3D', _encodeTable[32
/* Space */
] = '%20', _encodeTable);

function encodeURIComponentFast(uriComponent, allowSlash) {
  var res = undefined;
  var nativeEncodePos = -1;

  for (var pos = 0; pos < uriComponent.length; pos++) {
    var code = uriComponent.charCodeAt(pos); // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3

    if (code >= 97
    /* a */
    && code <= 122
    /* z */
    || code >= 65
    /* A */
    && code <= 90
    /* Z */
    || code >= 48
    /* Digit0 */
    && code <= 57
    /* Digit9 */
    || code === 45
    /* Dash */
    || code === 46
    /* Period */
    || code === 95
    /* Underline */
    || code === 126
    /* Tilde */
    || allowSlash && code === 47
    /* Slash */
    ) {
      // check if we are delaying native encode
      if (nativeEncodePos !== -1) {
        res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
        nativeEncodePos = -1;
      } // check if we write into a new string (by default we try to return the param)


      if (res !== undefined) {
        res += uriComponent.charAt(pos);
      }
    } else {
      // encoding needed, we need to allocate a new string
      if (res === undefined) {
        res = uriComponent.substr(0, pos);
      } // check with default table first


      var escaped = encodeTable[code];

      if (escaped !== undefined) {
        // check if we are delaying native encode
        if (nativeEncodePos !== -1) {
          res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
          nativeEncodePos = -1;
        } // append escaped variant to result


        res += escaped;
      } else if (nativeEncodePos === -1) {
        // use native encode only when needed
        nativeEncodePos = pos;
      }
    }
  }

  if (nativeEncodePos !== -1) {
    res += encodeURIComponent(uriComponent.substring(nativeEncodePos));
  }

  return res !== undefined ? res : uriComponent;
}

function encodeURIComponentMinimal(path) {
  var res = undefined;

  for (var pos = 0; pos < path.length; pos++) {
    var code = path.charCodeAt(pos);

    if (code === 35
    /* Hash */
    || code === 63
    /* QuestionMark */
    ) {
        if (res === undefined) {
          res = path.substr(0, pos);
        }

        res += encodeTable[code];
      } else {
      if (res !== undefined) {
        res += path[pos];
      }
    }
  }

  return res !== undefined ? res : path;
}

var Resource = /*#__PURE__*/function () {
  function Resource() {}

  Resource.sortByTitle = function sortByTitle(a, b) {
    return a.title.localeCompare(b.title);
  };

  Resource.isResource = function isResource(thing) {
    if (!thing) {
      return false;
    }

    return URI.isUri(thing.uri) && typeof thing.title === 'string' && typeof thing.type === 'string' && typeof thing.properties === 'object' && typeof thing.tags === 'object' && typeof thing.links === 'object';
  };

  return Resource;
}();

// A type of promise-like that resolves synchronously and supports only one observer
var _iteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = /*#__PURE__*/Symbol("Symbol.iterator")) : "@@iterator"; // Asynchronously iterate through an object's values
var _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = /*#__PURE__*/Symbol("Symbol.asyncIterator")) : "@@asyncIterator"; // Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }

  if (result && result.then) {
    return result.then(void 0, recover);
  }

  return result;
} // Asynchronously await a promise and pass the result to a finally continuation

var BaseLogger = /*#__PURE__*/function () {
  function BaseLogger(level) {
    if (level === void 0) {
      level = 'info';
    }

    this.level = level;
  }

  var _proto = BaseLogger.prototype;

  _proto.doLog = function doLog(msgLevel, message) {
    if (this.level === 'off') {
      return;
    }

    if (BaseLogger.severity[msgLevel] >= BaseLogger.severity[this.level]) {
      for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        params[_key - 2] = arguments[_key];
      }

      this.log.apply(this, [msgLevel, message].concat(params));
    }
  };

  _proto.debug = function debug(message) {
    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      params[_key2 - 1] = arguments[_key2];
    }

    this.doLog.apply(this, ['debug', message].concat(params));
  };

  _proto.info = function info(message) {
    for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      params[_key3 - 1] = arguments[_key3];
    }

    this.doLog.apply(this, ['info', message].concat(params));
  };

  _proto.warn = function warn(message) {
    for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      params[_key4 - 1] = arguments[_key4];
    }

    this.doLog.apply(this, ['warn', message].concat(params));
  };

  _proto.error = function error(message) {
    for (var _len5 = arguments.length, params = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      params[_key5 - 1] = arguments[_key5];
    }

    this.doLog.apply(this, ['error', message].concat(params));
  };

  _proto.getLevel = function getLevel() {
    return this.level;
  };

  _proto.setLevel = function setLevel(level) {
    this.level = level;
  };

  return BaseLogger;
}();
BaseLogger.severity = {
  debug: 1,
  info: 2,
  warn: 3,
  error: 4
};
var ConsoleLogger = /*#__PURE__*/function (_BaseLogger) {
  _inheritsLoose(ConsoleLogger, _BaseLogger);

  function ConsoleLogger() {
    return _BaseLogger.apply(this, arguments) || this;
  }

  var _proto2 = ConsoleLogger.prototype;

  _proto2.log = function log(level, msg) {
    var _console;

    for (var _len6 = arguments.length, params = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
      params[_key6 - 2] = arguments[_key6];
    }

    (_console = console)[level].apply(_console, ["[" + level + "] " + msg].concat(params));
  };

  return ConsoleLogger;
}(BaseLogger);
var Logger = /*#__PURE__*/function () {
  function Logger() {}

  Logger.debug = function debug(message) {
    var _Logger$defaultLogger;

    for (var _len7 = arguments.length, params = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      params[_key7 - 1] = arguments[_key7];
    }

    (_Logger$defaultLogger = Logger.defaultLogger).debug.apply(_Logger$defaultLogger, [message].concat(params));
  };

  Logger.info = function info(message) {
    var _Logger$defaultLogger2;

    for (var _len8 = arguments.length, params = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
      params[_key8 - 1] = arguments[_key8];
    }

    (_Logger$defaultLogger2 = Logger.defaultLogger).info.apply(_Logger$defaultLogger2, [message].concat(params));
  };

  Logger.warn = function warn(message) {
    var _Logger$defaultLogger3;

    for (var _len9 = arguments.length, params = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
      params[_key9 - 1] = arguments[_key9];
    }

    (_Logger$defaultLogger3 = Logger.defaultLogger).warn.apply(_Logger$defaultLogger3, [message].concat(params));
  };

  Logger.error = function error(message) {
    var _Logger$defaultLogger4;

    for (var _len10 = arguments.length, params = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
      params[_key10 - 1] = arguments[_key10];
    }

    (_Logger$defaultLogger4 = Logger.defaultLogger).error.apply(_Logger$defaultLogger4, [message].concat(params));
  };

  Logger.getLevel = function getLevel() {
    return Logger.defaultLogger.getLevel();
  };

  Logger.setLevel = function setLevel(level) {
    Logger.defaultLogger.setLevel(level);
  };

  Logger.setDefaultLogger = function setDefaultLogger(logger) {
    Logger.defaultLogger = logger;
  };

  return Logger;
}();
Logger.defaultLogger = /*#__PURE__*/new ConsoleLogger();

var findAllFiles = /*#__PURE__*/util.promisify(glob);
/**
 * The matcher requires the path to be in unix format, so if we are in windows
 * we convert the fs path on the way in and out
 */

var toMatcherPathFormat = isWindows ? function (uri) {
  return URI.toFsPath(uri).replace(/\\/g, '/');
} : function (uri) {
  return URI.toFsPath(uri);
};
var toFsPath = isWindows ? function (path) {
  return path.replace(/\//g, '\\');
} : function (path) {
  return path;
};
var Matcher = /*#__PURE__*/function () {
  function Matcher(baseFolders, include, exclude) {
    var _this = this;

    if (include === void 0) {
      include = ['**/*'];
    }

    if (exclude === void 0) {
      exclude = [];
    }

    this.include = [];
    this.exclude = [];
    this.folders = baseFolders.map(toMatcherPathFormat);
    Logger.info('Workspace folders: ', this.folders);
    this.folders.forEach(function (folder) {
      var _this$include, _this$exclude;

      var withFolder = folderPlusGlob(folder);

      (_this$include = _this.include).push.apply(_this$include, include.map(function (glob) {
        return withFolder(glob);
      }));

      (_this$exclude = _this.exclude).push.apply(_this$exclude, exclude.map(withFolder));
    });
    Logger.info('Glob patterns', {
      includeGlobs: this.include,
      ignoreGlobs: this.exclude
    });
  }

  var _proto = Matcher.prototype;

  _proto.match = function match(files) {
    var matches = micromatch(files.map(function (f) {
      return URI.toFsPath(f);
    }), this.include, {
      ignore: this.exclude,
      nocase: true,
      format: toFsPath
    });
    return matches.map(URI.file);
  };

  _proto.isMatch = function isMatch(uri) {
    return this.match([uri]).length > 0;
  };

  return Matcher;
}();
/**
 * File system based data store
 */

var FileDataStore = /*#__PURE__*/function () {
  function FileDataStore() {}

  var _proto2 = FileDataStore.prototype;

  _proto2.list = function list(glob, ignoreGlob) {
    try {
      return Promise.resolve(findAllFiles(glob, {
        ignore: ignoreGlob
      })).then(function (res) {
        return res.map(URI.file);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto2.read = function read(uri) {
    try {
      return Promise.resolve(_catch(function () {
        return Promise.resolve(fs__default.promises.readFile(URI.toFsPath(uri))).then(function (_fs$promises$readFile) {
          return _fs$promises$readFile.toString();
        });
      }, function (e) {
        Logger.error("FileDataStore: error while reading uri: " + uri.path + " - " + e);
        return null;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return FileDataStore;
}();
var folderPlusGlob = function folderPlusGlob(folder) {
  return function (glob) {
    if (folder.substr(-1) === '/') {
      folder = folder.slice(0, -1);
    }

    if (glob.startsWith('/')) {
      glob = glob.slice(1);
    }

    return folder.length > 0 ? folder + "/" + glob : glob;
  };
};

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// taken from https://github.com/microsoft/vscode/tree/master/src/vs/base/common
var Iterable;

(function (Iterable) {
  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(single),
      _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(filter),
      _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(map),
      _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(concat);

  function is(thing) {
    return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';
  }

  Iterable.is = is;

  var _empty = /*#__PURE__*/Object.freeze([]);

  function empty() {
    return _empty;
  }

  Iterable.empty = empty;

  function single(element) {
    return _regeneratorRuntime.wrap(function single$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return element;

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _marked);
  }

  Iterable.single = single;

  function from(iterable) {
    return iterable || _empty;
  }

  Iterable.from = from;

  function first(iterable) {
    return iterable[Symbol.iterator]().next().value;
  }

  Iterable.first = first;

  function some(iterable, predicate) {
    for (var _iterator = _createForOfIteratorHelperLoose(iterable), _step; !(_step = _iterator()).done;) {
      var element = _step.value;

      if (predicate(element)) {
        return true;
      }
    }

    return false;
  }

  Iterable.some = some;

  function filter(iterable, predicate) {
    var _iterator2, _step2, element;

    return _regeneratorRuntime.wrap(function filter$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _iterator2 = _createForOfIteratorHelperLoose(iterable);

          case 1:
            if ((_step2 = _iterator2()).done) {
              _context2.next = 8;
              break;
            }

            element = _step2.value;

            if (!predicate(element)) {
              _context2.next = 6;
              break;
            }

            _context2.next = 6;
            return element;

          case 6:
            _context2.next = 1;
            break;

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _marked2);
  }

  Iterable.filter = filter;

  function map(iterable, fn) {
    var _iterator3, _step3, element;

    return _regeneratorRuntime.wrap(function map$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _iterator3 = _createForOfIteratorHelperLoose(iterable);

          case 1:
            if ((_step3 = _iterator3()).done) {
              _context3.next = 7;
              break;
            }

            element = _step3.value;
            _context3.next = 5;
            return fn(element);

          case 5:
            _context3.next = 1;
            break;

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _marked3);
  }

  Iterable.map = map;

  function concat() {
    var _len,
        iterables,
        _key,
        _i,
        _iterables,
        iterable,
        _iterator4,
        _step4,
        element,
        _args4 = arguments;

    return _regeneratorRuntime.wrap(function concat$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            for (_len = _args4.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {
              iterables[_key] = _args4[_key];
            }

            _i = 0, _iterables = iterables;

          case 2:
            if (!(_i < _iterables.length)) {
              _context4.next = 14;
              break;
            }

            iterable = _iterables[_i];
            _iterator4 = _createForOfIteratorHelperLoose(iterable);

          case 5:
            if ((_step4 = _iterator4()).done) {
              _context4.next = 11;
              break;
            }

            element = _step4.value;
            _context4.next = 9;
            return element;

          case 9:
            _context4.next = 5;
            break;

          case 11:
            _i++;
            _context4.next = 2;
            break;

          case 14:
          case "end":
            return _context4.stop();
        }
      }
    }, _marked4);
  }

  Iterable.concat = concat;
  /**
   * Consumes `atMost` elements from iterable and returns the consumed elements,
   * and an iterable for the rest of the elements.
   */

  function consume(iterable, atMost) {
    var _ref;

    if (atMost === void 0) {
      atMost = Number.POSITIVE_INFINITY;
    }

    var consumed = [];

    if (atMost === 0) {
      return [consumed, iterable];
    }

    var iterator = iterable[Symbol.iterator]();

    for (var i = 0; i < atMost; i++) {
      var next = iterator.next();

      if (next.done) {
        return [consumed, Iterable.empty()];
      }

      consumed.push(next.value);
    }

    return [consumed, (_ref = {}, _ref[Symbol.iterator] = function () {
      return iterator;
    }, _ref)];
  }

  Iterable.consume = consume;
})(Iterable || (Iterable = {}));

function markTracked(x) {
  {
    return;
  }
}

function trackDisposable(x) {
  {
    return x;
  }
}

var MultiDisposeError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(MultiDisposeError, _Error);

  function MultiDisposeError(errors) {
    var _this;

    _this = _Error.call(this, "Encounter errors while disposing of store. Errors: [" + errors.join(', ') + "]") || this;
    _this.errors = errors;
    return _this;
  }

  return MultiDisposeError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
function isDisposable(thing) {
  return typeof thing.dispose === 'function' && thing.dispose.length === 0;
}

function _dispose(arg) {
  if (Iterable.is(arg)) {
    var errors = [];

    for (var _iterator = _createForOfIteratorHelperLoose(arg), _step; !(_step = _iterator()).done;) {
      var d = _step.value;

      if (d) {

        try {
          d.dispose();
        } catch (e) {
          errors.push(e);
        }
      }
    }

    if (errors.length === 1) {
      throw errors[0];
    } else if (errors.length > 1) {
      throw new MultiDisposeError(errors);
    }

    return Array.isArray(arg) ? [] : arg;
  } else if (arg) {
    arg.dispose();
    return arg;
  }
}
function combinedDisposable() {
  for (var _len = arguments.length, disposables = new Array(_len), _key = 0; _key < _len; _key++) {
    disposables[_key] = arguments[_key];
  }

  disposables.forEach(markTracked);
  return trackDisposable({
    dispose: function dispose() {
      return _dispose(disposables);
    }
  });
}
var DisposableStore = /*#__PURE__*/function () {
  function DisposableStore() {
    this._toDispose = new Set();
    this._isDisposed = false;
  }
  /**
   * Dispose of all registered disposables and mark this object as disposed.
   *
   * Any future disposables added to this object will be disposed of on `add`.
   */


  var _proto = DisposableStore.prototype;

  _proto.dispose = function dispose() {
    if (this._isDisposed) {
      return;
    }
    this._isDisposed = true;
    this.clear();
  }
  /**
   * Dispose of all registered disposables but do not mark this object as disposed.
   */
  ;

  _proto.clear = function clear() {
    try {
      _dispose(this._toDispose.values());
    } finally {
      this._toDispose.clear();
    }
  };

  _proto.add = function add(t) {
    if (!t) {
      return t;
    }

    if (t === this) {
      throw new Error('Cannot register a disposable on itself!');
    }

    if (this._isDisposed) {
      if (!DisposableStore.DISABLE_DISPOSED_WARNING) {
        console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);
      }
    } else {
      this._toDispose.add(t);
    }

    return t;
  };

  return DisposableStore;
}();
DisposableStore.DISABLE_DISPOSED_WARNING = false;
var Disposable = /*#__PURE__*/function () {
  function Disposable() {
    this._store = new DisposableStore();
  }

  var _proto2 = Disposable.prototype;

  _proto2.dispose = function dispose() {

    this._store.dispose();
  };

  _proto2._register = function _register(t) {
    if (t === this) {
      throw new Error('Cannot register a disposable on itself!');
    }

    return this._store.add(t);
  };

  return Disposable;
}();
Disposable.None = /*#__PURE__*/Object.freeze({
  dispose: function dispose() {}
});

function isSome(value) {
  return value != null;
}
function isNone(value) {
  return value == null;
}

var HASHTAG_REGEX = /(?<=^|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])#([0-9]*(?:[\x2D\/A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\x2D\/-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])*)/gm;
var WORD_REGEX = /(?<=^|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])([0-9]*(?:[\x2D\/A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\x2D\/-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])*)/gm;
var extractHashtags = function extractHashtags(text) {
  return isSome(text) ? Array.from(text.matchAll(HASHTAG_REGEX)).map(function (m) {
    return {
      label: m[1],
      offset: m.index
    };
  }) : [];
};
var extractTagsFromProp = function extractTagsFromProp(prop) {
  var text = Array.isArray(prop) ? prop.join(' ') : prop;
  return isSome(text) ? Array.from(text.matchAll(WORD_REGEX)).map(function (m) {
    return m[1];
  }) : [];
};

function dropExtension(path) {
  var parts = path.split('.');
  parts.pop();
  return parts.join('.');
}
/**
 *
 * @param filename
 * @returns title cased heading after removing special characters
 */

var getHeadingFromFileName = function getHeadingFromFileName(filename) {
  return titleCase.titleCase(filename.replace(/[^\w\s]/gi, ' '));
};

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Avoid circular dependency on EventEmitter by implementing a subset of the interface.
var ErrorHandler = /*#__PURE__*/function () {
  function ErrorHandler() {
    this.listeners = [];

    this.unexpectedErrorHandler = function (e) {
      setTimeout(function () {
        if (e.stack) {
          throw new Error(e.message + '\n\n' + e.stack);
        }

        throw e;
      }, 0);
    };
  }

  var _proto = ErrorHandler.prototype;

  _proto.addListener = function addListener(listener) {
    var _this = this;

    this.listeners.push(listener);
    return function () {
      _this._removeListener(listener);
    };
  };

  _proto.emit = function emit(e) {
    this.listeners.forEach(function (listener) {
      listener(e);
    });
  };

  _proto._removeListener = function _removeListener(listener) {
    this.listeners.splice(this.listeners.indexOf(listener), 1);
  };

  _proto.setUnexpectedErrorHandler = function setUnexpectedErrorHandler(newUnexpectedErrorHandler) {
    this.unexpectedErrorHandler = newUnexpectedErrorHandler;
  };

  _proto.getUnexpectedErrorHandler = function getUnexpectedErrorHandler() {
    return this.unexpectedErrorHandler;
  };

  _proto.onUnexpectedError = function onUnexpectedError(e) {
    this.unexpectedErrorHandler(e);
    this.emit(e);
  } // For external errors, we don't want the listeners to be called
  ;

  _proto.onUnexpectedExternalError = function onUnexpectedExternalError(e) {
    this.unexpectedErrorHandler(e);
  };

  return ErrorHandler;
}();
var errorHandler = /*#__PURE__*/new ErrorHandler();
function onUnexpectedError(e) {
  // ignore errors from cancelled promises
  if (!isPromiseCanceledError(e)) {
    errorHandler.onUnexpectedError(e);
  }

  return undefined;
}
var canceledName = 'Canceled';
/**
 * Checks if the given error is a promise in canceled state
 */

function isPromiseCanceledError(error) {
  return error instanceof Error && error.name === canceledName && error.message === canceledName;
}

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// taken from https://github.com/microsoft/vscode/tree/master/src/vs/base/common
var Node = function Node(element) {
  this.element = element;
  this.next = Node.Undefined;
  this.prev = Node.Undefined;
};

Node.Undefined = /*#__PURE__*/new Node(undefined);
var LinkedList = /*#__PURE__*/function () {
  function LinkedList() {
    this._first = Node.Undefined;
    this._last = Node.Undefined;
    this._size = 0;
  }

  var _proto = LinkedList.prototype;

  _proto.isEmpty = function isEmpty() {
    return this._first === Node.Undefined;
  };

  _proto.clear = function clear() {
    this._first = Node.Undefined;
    this._last = Node.Undefined;
    this._size = 0;
  };

  _proto.unshift = function unshift(element) {
    return this._insert(element, false);
  };

  _proto.push = function push(element) {
    return this._insert(element, true);
  };

  _proto._insert = function _insert(element, atTheEnd) {
    var _this = this;

    var newNode = new Node(element);

    if (this._first === Node.Undefined) {
      this._first = newNode;
      this._last = newNode;
    } else if (atTheEnd) {
      // push
      var oldLast = this._last;
      this._last = newNode;
      newNode.prev = oldLast;
      oldLast.next = newNode;
    } else {
      // unshift
      var oldFirst = this._first;
      this._first = newNode;
      newNode.next = oldFirst;
      oldFirst.prev = newNode;
    }

    this._size += 1;
    var didRemove = false;
    return function () {
      if (!didRemove) {
        didRemove = true;

        _this._remove(newNode);
      }
    };
  };

  _proto.shift = function shift() {
    if (this._first === Node.Undefined) {
      return undefined;
    } else {
      var res = this._first.element;

      this._remove(this._first);

      return res;
    }
  };

  _proto.pop = function pop() {
    if (this._last === Node.Undefined) {
      return undefined;
    } else {
      var res = this._last.element;

      this._remove(this._last);

      return res;
    }
  };

  _proto._remove = function _remove(node) {
    if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {
      // middle
      var anchor = node.prev;
      anchor.next = node.next;
      node.next.prev = anchor;
    } else if (node.prev === Node.Undefined && node.next === Node.Undefined) {
      // only node
      this._first = Node.Undefined;
      this._last = Node.Undefined;
    } else if (node.next === Node.Undefined) {
      // last
      this._last = this._last.prev;
      this._last.next = Node.Undefined;
    } else if (node.prev === Node.Undefined) {
      // first
      this._first = this._first.next;
      this._first.prev = Node.Undefined;
    } // done


    this._size -= 1;
  };

  _proto[Symbol.iterator] = /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var node;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            node = this._first;

          case 1:
            if (!(node !== Node.Undefined)) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return node.element;

          case 4:
            node = node.next;
            _context.next = 1;
            break;

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  });

  _createClass(LinkedList, [{
    key: "size",
    get: function get() {
      return this._size;
    }
  }]);

  return LinkedList;
}();

(function (Event) {
  Event.None = function () {
    return Disposable.None;
  };
  /**
   * Given an event, returns another event which only fires once.
   */


  function _once(event) {
    return function (listener, thisArgs, disposables) {
      if (thisArgs === void 0) {
        thisArgs = null;
      }

      // we need this, in case the event fires during the listener call
      var didFire = false;
      var result;
      result = event(function (e) {
        if (didFire) {
          return;
        } else if (result) {
          result.dispose();
        } else {
          didFire = true;
        }

        return listener.call(thisArgs, e);
      }, null, disposables);

      if (didFire) {
        result.dispose();
      }

      return result;
    };
  }

  Event.once = _once;
  /**
   * Given an event and a `map` function, returns another event which maps each element
   * through the mapping function.
   */

  function _map(event, map) {
    return snapshot(function (listener, thisArgs, disposables) {
      if (thisArgs === void 0) {
        thisArgs = null;
      }

      return event(function (i) {
        return listener.call(thisArgs, map(i));
      }, null, disposables);
    });
  }

  Event.map = _map;
  /**
   * Given an event and an `each` function, returns another identical event and calls
   * the `each` function per each element.
   */

  function _forEach(event, each) {
    return snapshot(function (listener, thisArgs, disposables) {
      if (thisArgs === void 0) {
        thisArgs = null;
      }

      return event(function (i) {
        each(i);
        listener.call(thisArgs, i);
      }, null, disposables);
    });
  }

  Event.forEach = _forEach;

  function _filter(event, filter) {
    return snapshot(function (listener, thisArgs, disposables) {
      if (thisArgs === void 0) {
        thisArgs = null;
      }

      return event(function (e) {
        return filter(e) && listener.call(thisArgs, e);
      }, null, disposables);
    });
  }

  Event.filter = _filter;
  /**
   * Given an event, returns the same event but typed as `Event<void>`.
   */

  function signal(event) {
    return event;
  }

  Event.signal = signal;

  function any() {
    for (var _len = arguments.length, events = new Array(_len), _key = 0; _key < _len; _key++) {
      events[_key] = arguments[_key];
    }

    return function (listener, thisArgs, disposables) {
      if (thisArgs === void 0) {
        thisArgs = null;
      }

      return combinedDisposable.apply(void 0, events.map(function (event) {
        return event(function (e) {
          return listener.call(thisArgs, e);
        }, null, disposables);
      }));
    };
  }

  Event.any = any;
  /**
   * Given an event and a `merge` function, returns another event which maps each element
   * and the cumulative result through the `merge` function. Similar to `map`, but with memory.
   */

  function _reduce(event, merge, initial) {
    var output = initial;
    return _map(event, function (e) {
      output = merge(output, e);
      return output;
    });
  }

  Event.reduce = _reduce;
  /**
   * Given a chain of event processing functions (filter, map, etc), each
   * function will be invoked per event & per listener. Snapshotting an event
   * chain allows each function to be invoked just once per event.
   */

  function snapshot(event) {
    var listener;
    var emitter = new Emitter({
      onFirstListenerAdd: function onFirstListenerAdd() {
        listener = event(emitter.fire, emitter);
      },
      onLastListenerRemove: function onLastListenerRemove() {
        listener.dispose();
      }
    });
    return emitter.event;
  }

  Event.snapshot = snapshot;

  function _debounce(event, merge, delay, leading, leakWarningThreshold) {
    if (delay === void 0) {
      delay = 100;
    }

    if (leading === void 0) {
      leading = false;
    }

    var subscription;
    var output = undefined;
    var handle = undefined;
    var numDebouncedCalls = 0;
    var emitter = new Emitter({
      leakWarningThreshold: leakWarningThreshold,
      onFirstListenerAdd: function onFirstListenerAdd() {
        subscription = event(function (cur) {
          numDebouncedCalls++;
          output = merge(output, cur);

          if (leading && !handle) {
            emitter.fire(output);
            output = undefined;
          }

          clearTimeout(handle);
          handle = setTimeout(function () {
            var _output = output;
            output = undefined;
            handle = undefined;

            if (!leading || numDebouncedCalls > 1) {
              emitter.fire(_output);
            }

            numDebouncedCalls = 0;
          }, delay);
        });
      },
      onLastListenerRemove: function onLastListenerRemove() {
        subscription.dispose();
      }
    });
    return emitter.event;
  }

  Event.debounce = _debounce;
  /**
   * Given an event, it returns another event which fires only once and as soon as
   * the input event emits. The event data is the number of millis it took for the
   * event to fire.
   */

  function stopwatch(event) {
    var start = new Date().getTime();
    return _map(_once(event), function (_) {
      return new Date().getTime() - start;
    });
  }

  Event.stopwatch = stopwatch;
  /**
   * Given an event, it returns another event which fires only when the event
   * element changes.
   */

  function _latch(event) {
    var firstCall = true;
    var cache;
    return _filter(event, function (value) {
      var shouldEmit = firstCall || value !== cache;
      firstCall = false;
      cache = value;
      return shouldEmit;
    });
  }

  Event.latch = _latch;
  /**
   * Buffers the provided event until a first listener comes
   * along, at which point fire all the events at once and
   * pipe the event from then on.
   *
   * ```typescript
   * const emitter = new Emitter<number>();
   * const event = emitter.event;
   * const bufferedEvent = buffer(event);
   *
   * emitter.fire(1);
   * emitter.fire(2);
   * emitter.fire(3);
   * // nothing...
   *
   * const listener = bufferedEvent(num => console.log(num));
   * // 1, 2, 3
   *
   * emitter.fire(4);
   * // 4
   * ```
   */

  function buffer(event, nextTick, _buffer) {
    if (nextTick === void 0) {
      nextTick = false;
    }

    if (_buffer === void 0) {
      _buffer = [];
    }

    var buffer = _buffer.slice();

    var listener = event(function (e) {
      if (buffer) {
        buffer.push(e);
      } else {
        emitter.fire(e);
      }
    });

    var flush = function flush() {
      if (buffer) {
        buffer.forEach(function (e) {
          return emitter.fire(e);
        });
      }

      buffer = null;
    };

    var emitter = new Emitter({
      onFirstListenerAdd: function onFirstListenerAdd() {
        if (!listener) {
          listener = event(function (e) {
            return emitter.fire(e);
          });
        }
      },
      onFirstListenerDidAdd: function onFirstListenerDidAdd() {
        if (buffer) {
          if (nextTick) {
            setTimeout(flush, 0);
          } else {
            flush();
          }
        }
      },
      onLastListenerRemove: function onLastListenerRemove() {
        if (listener) {
          listener.dispose();
        }

        listener = null;
      }
    });
    return emitter.event;
  }

  Event.buffer = buffer;

  var ChainableEvent = /*#__PURE__*/function () {
    function ChainableEvent(event) {
      this.event = event;
    }

    var _proto = ChainableEvent.prototype;

    _proto.map = function map(fn) {
      return new ChainableEvent(_map(this.event, fn));
    };

    _proto.forEach = function forEach(fn) {
      return new ChainableEvent(_forEach(this.event, fn));
    };

    _proto.filter = function filter(fn) {
      return new ChainableEvent(_filter(this.event, fn));
    };

    _proto.reduce = function reduce(merge, initial) {
      return new ChainableEvent(_reduce(this.event, merge, initial));
    };

    _proto.latch = function latch() {
      return new ChainableEvent(_latch(this.event));
    };

    _proto.debounce = function debounce(merge, delay, leading, leakWarningThreshold) {
      if (delay === void 0) {
        delay = 100;
      }

      if (leading === void 0) {
        leading = false;
      }

      return new ChainableEvent(_debounce(this.event, merge, delay, leading, leakWarningThreshold));
    };

    _proto.on = function on(listener, thisArgs, disposables) {
      return this.event(listener, thisArgs, disposables);
    };

    _proto.once = function once(listener, thisArgs, disposables) {
      return _once(this.event)(listener, thisArgs, disposables);
    };

    return ChainableEvent;
  }();

  function chain(event) {
    return new ChainableEvent(event);
  }

  Event.chain = chain;

  function fromNodeEventEmitter(emitter, eventName, map) {
    if (map === void 0) {
      map = function map(id) {
        return id;
      };
    }

    var fn = function fn() {
      return result.fire(map.apply(void 0, arguments));
    };

    var onFirstListenerAdd = function onFirstListenerAdd() {
      return emitter.on(eventName, fn);
    };

    var onLastListenerRemove = function onLastListenerRemove() {
      return emitter.removeListener(eventName, fn);
    };

    var result = new Emitter({
      onFirstListenerAdd: onFirstListenerAdd,
      onLastListenerRemove: onLastListenerRemove
    });
    return result.event;
  }

  Event.fromNodeEventEmitter = fromNodeEventEmitter;

  function fromDOMEventEmitter(emitter, eventName, map) {
    if (map === void 0) {
      map = function map(id) {
        return id;
      };
    }

    var fn = function fn() {
      return result.fire(map.apply(void 0, arguments));
    };

    var onFirstListenerAdd = function onFirstListenerAdd() {
      return emitter.addEventListener(eventName, fn);
    };

    var onLastListenerRemove = function onLastListenerRemove() {
      return emitter.removeEventListener(eventName, fn);
    };

    var result = new Emitter({
      onFirstListenerAdd: onFirstListenerAdd,
      onLastListenerRemove: onLastListenerRemove
    });
    return result.event;
  }

  Event.fromDOMEventEmitter = fromDOMEventEmitter;

  function fromPromise(promise) {
    var emitter = new Emitter();
    var shouldEmit = false;
    promise.then(undefined, function () {
      return null;
    }).then(function () {
      if (!shouldEmit) {
        setTimeout(function () {
          return emitter.fire(undefined);
        }, 0);
      } else {
        emitter.fire(undefined);
      }
    });
    shouldEmit = true;
    return emitter.event;
  }

  Event.fromPromise = fromPromise;

  function toPromise(event) {
    return new Promise(function (c) {
      return _once(event)(c);
    });
  }

  Event.toPromise = toPromise;
})(exports.Event || (exports.Event = {}));
/**
 * The Emitter can be used to expose an Event to the public
 * to fire it from the insides.
 * Sample:
    class Document {

        private readonly _onDidChange = new Emitter<(value:string)=>any>();

        public onDidChange = this._onDidChange.event;

        // getter-style
        // get onDidChange(): Event<(value:string)=>any> {
        // 	return this._onDidChange.event;
        // }

        private _doIt() {
            //...
            this._onDidChange.fire(value);
        }
    }
 */


var Emitter = /*#__PURE__*/function () {
  function Emitter(options) {
    this._disposed = false;
    this._options = options;
    this._leakageMon =  undefined;
  }
  /**
   * For the public to allow to subscribe
   * to events from this Emitter
   */


  var _proto3 = Emitter.prototype;

  /**
   * To be kept private to fire an event to
   * subscribers
   */
  _proto3.fire = function fire(event) {
    if (this._listeners) {
      // put all [listener,event]-pairs into delivery queue
      // then emit all event. an inner/nested event might be
      // the driver of this
      if (!this._deliveryQueue) {
        this._deliveryQueue = new LinkedList();
      }

      for (var _iterator2 = _createForOfIteratorHelperLoose(this._listeners), _step2; !(_step2 = _iterator2()).done;) {
        var _listener = _step2.value;

        this._deliveryQueue.push([_listener, event]);
      }

      while (this._deliveryQueue.size > 0) {
        var _this$_deliveryQueue$ = this._deliveryQueue.shift(),
            listener = _this$_deliveryQueue$[0],
            _event = _this$_deliveryQueue$[1];

        try {
          if (typeof listener === 'function') {
            listener.call(undefined, _event);
          } else {
            listener[0].call(listener[1], _event);
          }
        } catch (e) {
          onUnexpectedError(e);
        }
      }
    }
  };

  _proto3.dispose = function dispose() {
    if (this._listeners) {
      this._listeners.clear();
    }

    if (this._deliveryQueue) {
      this._deliveryQueue.clear();
    }

    if (this._leakageMon) {
      this._leakageMon.dispose();
    }

    this._disposed = true;
  };

  _createClass(Emitter, [{
    key: "event",
    get: function get() {
      var _this2 = this;

      if (!this._event) {
        this._event = function (listener, thisArgs, disposables) {
          if (!_this2._listeners) {
            _this2._listeners = new LinkedList();
          }

          var firstListener = _this2._listeners.isEmpty();

          if (firstListener && _this2._options && _this2._options.onFirstListenerAdd) {
            _this2._options.onFirstListenerAdd(_this2);
          }

          var remove = _this2._listeners.push(!thisArgs ? listener : [listener, thisArgs]);

          if (firstListener && _this2._options && _this2._options.onFirstListenerDidAdd) {
            _this2._options.onFirstListenerDidAdd(_this2);
          }

          if (_this2._options && _this2._options.onListenerDidAdd) {
            _this2._options.onListenerDidAdd(_this2, listener, thisArgs);
          } // check and record this emitter for potential leakage


          var removeMonitor;

          if (_this2._leakageMon) {
            removeMonitor = _this2._leakageMon.check(_this2._listeners.size);
          }

          var result;
          result = {
            dispose: function dispose() {
              if (removeMonitor) {
                removeMonitor();
              }

              result.dispose = Emitter._noop;

              if (!_this2._disposed) {
                remove();

                if (_this2._options && _this2._options.onLastListenerRemove) {
                  var hasListeners = _this2._listeners && !_this2._listeners.isEmpty();

                  if (!hasListeners) {
                    _this2._options.onLastListenerRemove(_this2);
                  }
                }
              }
            }
          };

          if (disposables instanceof DisposableStore) {
            disposables.add(result);
          } else if (Array.isArray(disposables)) {
            disposables.push(result);
          }

          return result;
        };
      }

      return this._event;
    }
  }]);

  return Emitter;
}();

Emitter._noop = function () {};

function getReferenceType(reference) {
  if (URI.isUri(reference)) {
    return 'uri';
  }

  var isPath = reference.split('/').length > 1;

  if (!isPath) {
    return 'key';
  }

  var isAbsPath = isPath && reference.startsWith('/');
  return isAbsPath ? 'absolute-path' : 'relative-path';
}

var pathToResourceId = function pathToResourceId(pathValue) {
  var _path$parse = paths.parse(pathValue),
      ext = _path$parse.ext;

  return ext.length > 0 ? pathValue : pathValue + '.md';
};

var uriToResourceId = function uriToResourceId(uri) {
  return pathToResourceId(uri.path);
};

var pathToResourceName = function pathToResourceName(pathValue) {
  return paths.parse(pathValue).name.toLowerCase();
};

var uriToResourceName = function uriToResourceName(uri) {
  return pathToResourceName(uri.path);
};
var FoamWorkspace = /*#__PURE__*/function () {
  function FoamWorkspace() {
    this.onDidAddEmitter = new Emitter();
    this.onDidUpdateEmitter = new Emitter();
    this.onDidDeleteEmitter = new Emitter();
    this.onDidAdd = this.onDidAddEmitter.event;
    this.onDidUpdate = this.onDidUpdateEmitter.event;
    this.onDidDelete = this.onDidDeleteEmitter.event;
    this.providers = [];
    /**
     * Resources by key / slug
     */

    this.resourcesByName = new Map();
    /**
     * Resources by URI
     */

    this.resources = new Map();
  }

  var _proto = FoamWorkspace.prototype;

  _proto.registerProvider = function registerProvider(provider) {
    this.providers.push(provider);
    return provider.init(this);
  };

  _proto.set = function set(resource) {
    var _this$resourcesByName;

    var id = uriToResourceId(resource.uri);
    var old = this.find(resource.uri);
    var name = uriToResourceName(resource.uri);
    this.resources.set(id, resource);

    if (!this.resourcesByName.has(name)) {
      this.resourcesByName.set(name, []);
    }

    (_this$resourcesByName = this.resourcesByName.get(name)) === null || _this$resourcesByName === void 0 ? void 0 : _this$resourcesByName.push(id);
    isSome(old) ? this.onDidUpdateEmitter.fire({
      old: old,
      "new": resource
    }) : this.onDidAddEmitter.fire(resource);
    return this;
  };

  _proto["delete"] = function _delete(uri) {
    var _this$resourcesByName2, _this$resourcesByName3, _this$resourcesByName4;

    var id = uriToResourceId(uri);
    var deleted = this.resources.get(id);
    this.resources["delete"](id);
    var name = uriToResourceName(uri);
    this.resourcesByName.set(name, (_this$resourcesByName2 = (_this$resourcesByName3 = this.resourcesByName.get(name)) === null || _this$resourcesByName3 === void 0 ? void 0 : _this$resourcesByName3.filter(function (resId) {
      return resId !== id;
    })) !== null && _this$resourcesByName2 !== void 0 ? _this$resourcesByName2 : []);

    if (((_this$resourcesByName4 = this.resourcesByName.get(name)) === null || _this$resourcesByName4 === void 0 ? void 0 : _this$resourcesByName4.length) === 0) {
      this.resourcesByName["delete"](name);
    }

    isSome(deleted) && this.onDidDeleteEmitter.fire(deleted);
    return deleted !== null && deleted !== void 0 ? deleted : null;
  };

  _proto.exists = function exists(uri) {
    return !URI.isPlaceholder(uri) && isSome(this.resources.get(uriToResourceId(uri)));
  };

  _proto.list = function list() {
    return Array.from(this.resources.values());
  };

  _proto.get = function get(uri) {
    var note = this.find(uri);

    if (isSome(note)) {
      return note;
    } else {
      throw new Error('Resource not found: ' + uri.path);
    }
  };

  _proto.find = function find(resourceId, reference) {
    var _this$resources$get, _this$resources$get2, _this$resources$get3, _this$resources$get4;

    var refType = getReferenceType(resourceId);

    switch (refType) {
      case 'uri':
        var uri = resourceId;
        return this.exists(uri) ? (_this$resources$get = this.resources.get(uriToResourceId(uri))) !== null && _this$resources$get !== void 0 ? _this$resources$get : null : null;

      case 'key':
        var name = pathToResourceName(resourceId);
        var paths = this.resourcesByName.get(name);

        if (isNone(paths) || paths.length === 0) {
          paths = this.resourcesByName.get(resourceId);
        }

        if (isNone(paths) || paths.length === 0) {
          return null;
        } // prettier-ignore


        var sortedPaths = paths.length === 1 ? paths : paths.sort(function (a, b) {
          return a.localeCompare(b);
        });
        return (_this$resources$get2 = this.resources.get(sortedPaths[0])) !== null && _this$resources$get2 !== void 0 ? _this$resources$get2 : null;

      case 'absolute-path':
        var resourceUri = URI.file(resourceId);
        return (_this$resources$get3 = this.resources.get(uriToResourceId(resourceUri))) !== null && _this$resources$get3 !== void 0 ? _this$resources$get3 : null;

      case 'relative-path':
        if (isNone(reference)) {
          return null;
        }

        var relativePath = resourceId;
        var targetUri = URI.computeRelativeURI(reference, relativePath);
        return (_this$resources$get4 = this.resources.get(uriToResourceId(targetUri))) !== null && _this$resources$get4 !== void 0 ? _this$resources$get4 : null;

      default:
        throw new Error('Unexpected reference type: ' + refType);
    }
  };

  _proto.resolveLink = function resolveLink(resource, link) {
    var _provider$resolveLink;

    // TODO add tests
    var provider = this.providers.find(function (p) {
      return p.supports(resource.uri);
    });
    return (_provider$resolveLink = provider === null || provider === void 0 ? void 0 : provider.resolveLink(this, resource, link)) !== null && _provider$resolveLink !== void 0 ? _provider$resolveLink : URI.placeholder(link.target);
  };

  _proto.read = function read(uri) {
    var _provider$read;

    var provider = this.providers.find(function (p) {
      return p.supports(uri);
    });
    return (_provider$read = provider === null || provider === void 0 ? void 0 : provider.read(uri)) !== null && _provider$read !== void 0 ? _provider$read : Promise.resolve(null);
  };

  _proto.readAsMarkdown = function readAsMarkdown(uri) {
    var _provider$readAsMarkd;

    var provider = this.providers.find(function (p) {
      return p.supports(uri);
    });
    return (_provider$readAsMarkd = provider === null || provider === void 0 ? void 0 : provider.readAsMarkdown(uri)) !== null && _provider$readAsMarkd !== void 0 ? _provider$readAsMarkd : Promise.resolve(null);
  };

  _proto.dispose = function dispose() {
    this.onDidAddEmitter.dispose();
    this.onDidDeleteEmitter.dispose();
    this.onDidUpdateEmitter.dispose();
  };

  return FoamWorkspace;
}();

// Some code in this file coming from https://github.com/microsoft/vscode/
// See LICENSE for details
var Position = /*#__PURE__*/function () {
  function Position() {}

  Position.create = function create(line, character) {
    return {
      line: line,
      character: character
    };
  };

  Position.Min = function Min() {
    if (arguments.length === 0) {
      throw new TypeError();
    }

    var result = arguments.length <= 0 ? undefined : arguments[0];

    for (var i = 1; i < arguments.length; i++) {
      var p = i < 0 || arguments.length <= i ? undefined : arguments[i];

      if (Position.isBefore(p, result)) {
        result = p;
      }
    }

    return result;
  };

  Position.Max = function Max() {
    if (arguments.length === 0) {
      throw new TypeError();
    }

    var result = arguments.length <= 0 ? undefined : arguments[0];

    for (var i = 1; i < arguments.length; i++) {
      var p = i < 0 || arguments.length <= i ? undefined : arguments[i];

      if (Position.isAfter(p, result)) {
        result = p;
      }
    }

    return result;
  };

  Position.isBefore = function isBefore(p1, p2) {
    if (p1.line < p2.line) {
      return true;
    }

    if (p2.line < p1.line) {
      return false;
    }

    return p1.character < p2.character;
  };

  Position.isBeforeOrEqual = function isBeforeOrEqual(p1, p2) {
    if (p1.line < p2.line) {
      return true;
    }

    if (p2.line < p1.line) {
      return false;
    }

    return p1.character <= p2.character;
  };

  Position.isAfter = function isAfter(p1, p2) {
    return !Position.isBeforeOrEqual(p1, p2);
  };

  Position.isAfterOrEqual = function isAfterOrEqual(p1, p2) {
    return !Position.isBefore(p1, p2);
  };

  Position.isEqual = function isEqual(p1, p2) {
    return p1.line === p2.line && p1.character === p2.character;
  };

  Position.compareTo = function compareTo(p1, p2) {
    if (p1.line < p2.line) {
      return -1;
    } else if (p1.line > p2.line) {
      return 1;
    } else {
      // equal line
      if (p1.character < p2.character) {
        return -1;
      } else if (p1.character > p2.character) {
        return 1;
      } else {
        // equal line and character
        return 0;
      }
    }
  };

  return Position;
}();

// Some code in this file coming from https://github.com/microsoft/vscode/
var Range = /*#__PURE__*/function () {
  function Range() {}

  Range.create = function create(startLine, startChar, endLine, endChar) {
    var start = {
      line: startLine,
      character: startChar
    };
    var end = {
      line: endLine !== null && endLine !== void 0 ? endLine : startLine,
      character: endChar !== null && endChar !== void 0 ? endChar : startChar
    };
    return Range.createFromPosition(start, end);
  };

  Range.createFromPosition = function createFromPosition(start, end) {
    var _end;

    end = (_end = end) !== null && _end !== void 0 ? _end : start;
    var first = start;
    var second = end;

    if (Position.isAfter(start, end)) {
      first = end;
      second = start;
    }

    return {
      start: {
        line: first.line,
        character: first.character
      },
      end: {
        line: second.line,
        character: second.character
      }
    };
  };

  Range.containsRange = function containsRange(range, contained) {
    return Range.containsPosition(range, contained.start) && Range.containsPosition(range, contained.end);
  };

  Range.containsPosition = function containsPosition(range, position) {
    return Position.isAfterOrEqual(position, range.start) && Position.isBeforeOrEqual(position, range.end);
  };

  Range.isEqual = function isEqual(r1, r2) {
    return Position.isEqual(r1.start, r2.start) && Position.isEqual(r1.end, r2.end);
  };

  Range.isBefore = function isBefore(a, b) {
    return a.start.line - b.start.line || a.start.character - b.start.character;
  };

  return Range;
}();

var pathToPlaceholderId = function pathToPlaceholderId(value) {
  return value;
};

var uriToPlaceholderId = function uriToPlaceholderId(uri) {
  return pathToPlaceholderId(uri.path);
};

var FoamGraph = /*#__PURE__*/function () {
  function FoamGraph(workspace) {
    this.workspace = workspace;
    /**
     * Placehoders by key / slug / value
     */

    this.placeholders = new Map();
    /**
     * Maps the connections starting from a URI
     */

    this.links = new Map();
    /**
     * Maps the connections arriving to a URI
     */

    this.backlinks = new Map();
    /**
     * List of disposables to destroy with the workspace
     */

    this.disposables = [];
  }

  var _proto = FoamGraph.prototype;

  _proto.contains = function contains(uri) {
    return this.getConnections(uri).length > 0;
  };

  _proto.getAllNodes = function getAllNodes() {
    return [].concat(Array.from(this.placeholders.values()), this.workspace.list().map(function (r) {
      return r.uri;
    }));
  };

  _proto.getAllConnections = function getAllConnections() {
    return Array.from(this.links.values()).flat();
  };

  _proto.getConnections = function getConnections(uri) {
    return [].concat(this.links.get(uri.path) || [], this.backlinks.get(uri.path) || []);
  };

  _proto.getLinks = function getLinks(uri) {
    var _this$links$get;

    return (_this$links$get = this.links.get(uri.path)) !== null && _this$links$get !== void 0 ? _this$links$get : [];
  };

  _proto.getBacklinks = function getBacklinks(uri) {
    var _this$backlinks$get;

    return (_this$backlinks$get = this.backlinks.get(uri.path)) !== null && _this$backlinks$get !== void 0 ? _this$backlinks$get : [];
  }
  /**
   * Computes all the links in the workspace, connecting notes and
   * creating placeholders.
   *
   * @param workspace the target workspace
   * @param keepMonitoring whether to recompute the links when the workspace changes
   * @returns the FoamGraph
   */
  ;

  FoamGraph.fromWorkspace = function fromWorkspace(workspace, keepMonitoring) {
    if (keepMonitoring === void 0) {
      keepMonitoring = false;
    }

    var graph = new FoamGraph(workspace);
    workspace.list().forEach(function (resource) {
      return graph.resolveResource(resource);
    });

    if (keepMonitoring) {
      graph.disposables.push(workspace.onDidAdd(function (resource) {
        graph.updateLinksRelatedToAddedResource(resource);
      }), workspace.onDidUpdate(function (change) {
        graph.updateLinksForResource(change.old, change["new"]);
      }), workspace.onDidDelete(function (resource) {
        graph.updateLinksRelatedToDeletedResource(resource);
      }));
    }

    return graph;
  };

  _proto.updateLinksRelatedToAddedResource = function updateLinksRelatedToAddedResource(resource) {
    var _this = this;

    // check if any existing connection can be filled by new resource
    var name = uriToResourceName(resource.uri);
    var placeholder = this.placeholders.get(name);

    if (placeholder) {
      var _this$backlinks$get2;

      this.placeholders["delete"](name);
      var resourcesToUpdate = (_this$backlinks$get2 = this.backlinks.get(placeholder.path)) !== null && _this$backlinks$get2 !== void 0 ? _this$backlinks$get2 : [];
      resourcesToUpdate.forEach(function (res) {
        return _this.resolveResource(_this.workspace.get(res.source));
      });
    } // resolve the resource


    this.resolveResource(resource);
  };

  _proto.updateLinksForResource = function updateLinksForResource(oldResource, newResource) {
    var _this2 = this;

    if (oldResource.uri.path !== newResource.uri.path) {
      throw new Error('Unexpected State: update should only be called on same resource ' + {
        old: oldResource,
        "new": newResource
      });
    }

    if (oldResource.type === 'note' && newResource.type === 'note') {
      var patch = fastArrayDiff.diff(oldResource.links, newResource.links, lodash.isEqual);
      patch.removed.forEach(function (link) {
        var target = _this2.workspace.resolveLink(oldResource, link);

        return _this2.disconnect(oldResource.uri, target, link);
      }, this);
      patch.added.forEach(function (link) {
        var target = _this2.workspace.resolveLink(newResource, link);

        return _this2.connect(newResource.uri, target, link);
      }, this);
    }

    return this;
  };

  _proto.updateLinksRelatedToDeletedResource = function updateLinksRelatedToDeletedResource(resource) {
    var _this$links$get2,
        _this3 = this,
        _this$backlinks$get3;

    var uri = resource.uri; // remove forward links from old resource

    var resourcesPointedByDeletedNote = (_this$links$get2 = this.links.get(uri.path)) !== null && _this$links$get2 !== void 0 ? _this$links$get2 : [];
    this.links["delete"](uri.path);
    resourcesPointedByDeletedNote.forEach(function (connection) {
      return _this3.disconnect(uri, connection.target, connection.link);
    }); // recompute previous links to old resource

    var notesPointingToDeletedResource = (_this$backlinks$get3 = this.backlinks.get(uri.path)) !== null && _this$backlinks$get3 !== void 0 ? _this$backlinks$get3 : [];
    this.backlinks["delete"](uri.path);
    notesPointingToDeletedResource.forEach(function (link) {
      return _this3.resolveResource(_this3.workspace.get(link.source));
    });
    return this;
  };

  _proto.connect = function connect(source, target, link) {
    var _this$links$get3, _this$backlinks$get4;

    var connection = {
      source: source,
      target: target,
      link: link
    };

    if (!this.links.has(source.path)) {
      this.links.set(source.path, []);
    }

    (_this$links$get3 = this.links.get(source.path)) === null || _this$links$get3 === void 0 ? void 0 : _this$links$get3.push(connection);

    if (!this.backlinks.get(target.path)) {
      this.backlinks.set(target.path, []);
    }

    (_this$backlinks$get4 = this.backlinks.get(target.path)) === null || _this$backlinks$get4 === void 0 ? void 0 : _this$backlinks$get4.push(connection);

    if (URI.isPlaceholder(target)) {
      this.placeholders.set(uriToPlaceholderId(target), target);
    }

    return this;
  }
  /**
   * Removes a connection, or all connections, between the source and
   * target resources
   *
   * @param workspace the Foam workspace
   * @param source the source resource
   * @param target the target resource
   * @param link the link reference, or `true` to remove all links
   * @returns the updated Foam workspace
   */
  ;

  _proto.disconnect = function disconnect(source, target, link) {
    var _this$links$get$filte, _this$links$get4, _this$links$get5, _this$backlinks$get$f, _this$backlinks$get5, _this$backlinks$get6;

    var connectionsToKeep = link === true ? function (c) {
      return !URI.isEqual(source, c.source) || !URI.isEqual(target, c.target);
    } : function (c) {
      return !isSameConnection({
        source: source,
        target: target,
        link: link
      }, c);
    };
    this.links.set(source.path, (_this$links$get$filte = (_this$links$get4 = this.links.get(source.path)) === null || _this$links$get4 === void 0 ? void 0 : _this$links$get4.filter(connectionsToKeep)) !== null && _this$links$get$filte !== void 0 ? _this$links$get$filte : []);

    if (((_this$links$get5 = this.links.get(source.path)) === null || _this$links$get5 === void 0 ? void 0 : _this$links$get5.length) === 0) {
      this.links["delete"](source.path);
    }

    this.backlinks.set(target.path, (_this$backlinks$get$f = (_this$backlinks$get5 = this.backlinks.get(target.path)) === null || _this$backlinks$get5 === void 0 ? void 0 : _this$backlinks$get5.filter(connectionsToKeep)) !== null && _this$backlinks$get$f !== void 0 ? _this$backlinks$get$f : []);

    if (((_this$backlinks$get6 = this.backlinks.get(target.path)) === null || _this$backlinks$get6 === void 0 ? void 0 : _this$backlinks$get6.length) === 0) {
      this.backlinks["delete"](target.path);

      if (URI.isPlaceholder(target)) {
        this.placeholders["delete"](uriToPlaceholderId(target));
      }
    }

    return this;
  };

  _proto.resolveResource = function resolveResource(resource) {
    var _this4 = this;

    this.links["delete"](resource.uri.path); // prettier-ignore

    resource.links.forEach(function (link) {
      var targetUri = _this4.workspace.resolveLink(resource, link);

      _this4.connect(resource.uri, targetUri, link);
    });
    return this;
  };

  _proto.dispose = function dispose() {
    this.disposables.forEach(function (d) {
      return d.dispose();
    });
    this.disposables = [];
  };

  return FoamGraph;
}(); // TODO move these utility fns to appropriate places

var isSameConnection = function isSameConnection(a, b) {
  return URI.isEqual(a.source, b.source) && URI.isEqual(a.target, b.target) && isSameLink(a.link, b.link);
};

var isSameLink = function isSameLink(a, b) {
  return a.type === b.type && Range.isEqual(a.range, b.range);
};

var FoamTags = /*#__PURE__*/function () {
  function FoamTags() {
    this.tags = new Map();
    /**
     * List of disposables to destroy with the tags
     */

    this.disposables = [];
  }
  /**
   * Computes all tags in the workspace and keep them up-to-date
   *
   * @param workspace the target workspace
   * @param keepMonitoring whether to recompute the links when the workspace changes
   * @returns the FoamTags
   */


  FoamTags.fromWorkspace = function fromWorkspace(workspace, keepMonitoring) {
    if (keepMonitoring === void 0) {
      keepMonitoring = false;
    }

    var tags = new FoamTags();
    workspace.list().forEach(function (resource) {
      return tags.addResourceFromTagIndex(resource);
    });

    if (keepMonitoring) {
      tags.disposables.push(workspace.onDidAdd(function (resource) {
        tags.addResourceFromTagIndex(resource);
      }), workspace.onDidUpdate(function (change) {
        tags.updateResourceWithinTagIndex(change.old, change["new"]);
      }), workspace.onDidDelete(function (resource) {
        tags.removeResourceFromTagIndex(resource);
      }));
    }

    return tags;
  };

  var _proto = FoamTags.prototype;

  _proto.dispose = function dispose() {
    this.disposables.forEach(function (d) {
      return d.dispose();
    });
    this.disposables = [];
  };

  _proto.updateResourceWithinTagIndex = function updateResourceWithinTagIndex(oldResource, newResource) {
    this.removeResourceFromTagIndex(oldResource);
    this.addResourceFromTagIndex(newResource);
  };

  _proto.addResourceFromTagIndex = function addResourceFromTagIndex(resource) {
    var _this = this;

    new Set(resource.tags.map(function (t) {
      return t.label;
    })).forEach(function (tag) {
      var _this$tags$get;

      var tagMeta = (_this$tags$get = _this.tags.get(tag)) !== null && _this$tags$get !== void 0 ? _this$tags$get : [];
      tagMeta.push(resource.uri);

      _this.tags.set(tag, tagMeta);
    });
  };

  _proto.removeResourceFromTagIndex = function removeResourceFromTagIndex(resource) {
    var _this2 = this;

    resource.tags.forEach(function (t) {
      var tag = t.label;

      if (_this2.tags.has(tag)) {
        var _this2$tags$get;

        var remainingLocations = (_this2$tags$get = _this2.tags.get(tag)) === null || _this2$tags$get === void 0 ? void 0 : _this2$tags$get.filter(function (uri) {
          return !URI.isEqual(uri, resource.uri);
        });

        if (remainingLocations && remainingLocations.length > 0) {
          _this2.tags.set(tag, remainingLocations);
        } else {
          _this2.tags["delete"](tag);
        }
      }
    });
  };

  return FoamTags;
}();

var ALIAS_DIVIDER_CHAR = '|';
var MarkdownResourceProvider = /*#__PURE__*/function () {
  function MarkdownResourceProvider(matcher, watcherInit, parser, dataStore) {
    if (parser === void 0) {
      parser = createMarkdownParser([]);
    }

    if (dataStore === void 0) {
      dataStore = new FileDataStore();
    }

    this.matcher = matcher;
    this.watcherInit = watcherInit;
    this.parser = parser;
    this.dataStore = dataStore;
    this.disposables = [];
  }

  var _proto = MarkdownResourceProvider.prototype;

  _proto.init = function init(workspace) {
    try {
      var _this2 = this;

      return Promise.resolve(Promise.all(_this2.matcher.include.map(function (glob) {
        return _this2.dataStore.list(glob, _this2.matcher.exclude);
      }))).then(function (filesByFolder) {
        var files = _this2.matcher.match(filesByFolder.flat()).filter(_this2.supports);

        return Promise.resolve(Promise.all(files.map(function (uri) {
          try {
            Logger.info('Found: ' + URI.toString(uri));
            return Promise.resolve(_this2.dataStore.read(uri)).then(function (content) {
              if (isSome(content)) {
                workspace.set(_this2.parser.parse(uri, content));
              }
            });
          } catch (e) {
            return Promise.reject(e);
          }
        }))).then(function () {
          var _this2$watcherInit, _this2$watcherInit2;

          _this2.disposables = (_this2$watcherInit = (_this2$watcherInit2 = _this2.watcherInit) === null || _this2$watcherInit2 === void 0 ? void 0 : _this2$watcherInit2.call(_this2, {
            onDidChange: function (uri) {
              try {
                var _temp3 = function () {
                  if (_this2.matcher.isMatch(uri) && _this2.supports(uri)) {
                    return Promise.resolve(_this2.dataStore.read(uri)).then(function (content) {
                      function _temp(_this2$parser$parse) {
                        _isSome && _set.call(workspace, _this2$parser$parse);
                      }

                      var _isSome = isSome(content),
                          _set = _isSome && workspace.set;

                      return _isSome ? Promise.resolve(_this2.parser.parse(uri, content)).then(_temp) : _temp(_isSome);
                    });
                  }
                }();

                return Promise.resolve(_temp3 && _temp3.then ? _temp3.then(function () {}) : void 0);
              } catch (e) {
                return Promise.reject(e);
              }
            },
            onDidCreate: function (uri) {
              try {
                var _temp6 = function () {
                  if (_this2.matcher.isMatch(uri) && _this2.supports(uri)) {
                    return Promise.resolve(_this2.dataStore.read(uri)).then(function (content) {
                      function _temp4(_this2$parser$parse2) {
                        _isSome2 && _set2.call(workspace, _this2$parser$parse2);
                      }

                      var _isSome2 = isSome(content),
                          _set2 = _isSome2 && workspace.set;

                      return _isSome2 ? Promise.resolve(_this2.parser.parse(uri, content)).then(_temp4) : _temp4(_isSome2);
                    });
                  }
                }();

                return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(function () {}) : void 0);
              } catch (e) {
                return Promise.reject(e);
              }
            },
            onDidDelete: function onDidDelete(uri) {
              _this2.supports(uri) && workspace["delete"](uri);
            }
          })) !== null && _this2$watcherInit !== void 0 ? _this2$watcherInit : [];
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.supports = function supports(uri) {
    return URI.isMarkdownFile(uri);
  };

  _proto.read = function read(uri) {
    return this.dataStore.read(uri);
  };

  _proto.readAsMarkdown = function readAsMarkdown(uri) {
    return this.dataStore.read(uri);
  };

  _proto.fetch = function fetch(uri) {
    try {
      var _this4 = this;

      return Promise.resolve(_this4.read(uri)).then(function (content) {
        return isSome(content) ? _this4.parser.parse(uri, content) : null;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.resolveLink = function resolveLink(workspace, resource, link) {
    var _resource$definitions, _workspace$find$uri3, _workspace$find3;

    var targetUri;

    switch (link.type) {
      case 'wikilink':
        var definitionUri = (_resource$definitions = resource.definitions.find(function (def) {
          return def.label === link.target;
        })) === null || _resource$definitions === void 0 ? void 0 : _resource$definitions.url;

        if (isSome(definitionUri)) {
          var _workspace$find$uri, _workspace$find;

          var definedUri = URI.resolve(definitionUri, resource.uri);
          targetUri = (_workspace$find$uri = (_workspace$find = workspace.find(definedUri, resource.uri)) === null || _workspace$find === void 0 ? void 0 : _workspace$find.uri) !== null && _workspace$find$uri !== void 0 ? _workspace$find$uri : URI.placeholder(definedUri.path);
        } else {
          var _workspace$find$uri2, _workspace$find2;

          targetUri = (_workspace$find$uri2 = (_workspace$find2 = workspace.find(link.target, resource.uri)) === null || _workspace$find2 === void 0 ? void 0 : _workspace$find2.uri) !== null && _workspace$find$uri2 !== void 0 ? _workspace$find$uri2 : URI.placeholder(link.target);
        }

        break;

      case 'link':
        targetUri = (_workspace$find$uri3 = (_workspace$find3 = workspace.find(link.target, resource.uri)) === null || _workspace$find3 === void 0 ? void 0 : _workspace$find3.uri) !== null && _workspace$find$uri3 !== void 0 ? _workspace$find$uri3 : URI.placeholder(URI.resolve(link.target, resource.uri).path);
        break;
    }

    return targetUri;
  };

  _proto.dispose = function dispose() {
    this.disposables.forEach(function (d) {
      return d.dispose();
    });
  };

  return MarkdownResourceProvider;
}();
/**
 * Traverses all the children of the given node, extracts
 * the text from them, and returns it concatenated.
 *
 * @param root the node from which to start collecting text
 */

var getTextFromChildren = function getTextFromChildren(root) {
  var text = '';
  visit(root, 'text', function (node) {
    if (node.type === 'text') {
      text = text + node.value;
    }
  });
  return text;
};

var tagsPlugin = {
  name: 'tags',
  onDidFindProperties: function onDidFindProperties(props, note, node) {
    if (isSome(props.tags)) {
      var yamlTags = extractTagsFromProp(props.tags);
      yamlTags.forEach(function (t) {
        note.tags.push({
          label: t,
          range: astPositionToFoamRange(node.position)
        });
      });
    }
  },
  visit: function visit(node, note) {
    if (node.type === 'text') {
      var tags = extractHashtags(node.value);
      tags.forEach(function (tag) {
        var start = astPointToFoamPosition(node.position.start);
        start.character = start.character + tag.offset;
        var end = {
          line: start.line,
          character: start.character + tag.label.length + 1
        };
        note.tags.push({
          label: tag.label,
          range: Range.createFromPosition(start, end)
        });
      });
    }
  }
};
var titlePlugin = {
  name: 'title',
  visit: function visit(node, note) {
    if (note.title === '' && node.type === 'heading' && node.depth === 1) {
      var _node$children, _node$children$;

      note.title = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : (_node$children$ = _node$children[0]) === null || _node$children$ === void 0 ? void 0 : _node$children$.value) || note.title;
    }
  },
  onDidFindProperties: function onDidFindProperties(props, note) {
    var _props$title$toString, _props$title;

    // Give precendence to the title from the frontmatter if it exists
    note.title = (_props$title$toString = (_props$title = props.title) === null || _props$title === void 0 ? void 0 : _props$title.toString()) !== null && _props$title$toString !== void 0 ? _props$title$toString : note.title;
  },
  onDidVisitTree: function onDidVisitTree(tree, note) {
    if (note.title === '') {
      note.title = URI.getBasename(note.uri);
    }
  }
};
var wikilinkPlugin = {
  name: 'wikilink',
  visit: function visit(node, note, noteSource) {
    if (node.type === 'wikiLink') {
      var _node$data;

      var text = node.value;
      var alias = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.alias;
      var literalContent = noteSource.substring(node.position.start.offset, node.position.end.offset);
      var hasAlias = literalContent !== text && literalContent.includes(ALIAS_DIVIDER_CHAR);
      note.links.push({
        type: 'wikilink',
        rawText: literalContent,
        label: hasAlias ? alias.trim() : literalContent.substring(2, literalContent.length - 2),
        target: hasAlias ? literalContent.substring(2, literalContent.indexOf(ALIAS_DIVIDER_CHAR)).replace(/\\/g, '').trim() : text.trim(),
        range: astPositionToFoamRange(node.position)
      });
    }

    if (node.type === 'link') {
      var targetUri = node.url;
      var uri = URI.resolve(targetUri, note.uri);

      if (uri.scheme !== 'file' || uri.path === note.uri.path) {
        return;
      }

      var label = getTextFromChildren(node);
      note.links.push({
        type: 'link',
        target: targetUri,
        label: label,
        range: astPositionToFoamRange(node.position)
      });
    }
  }
};
var definitionsPlugin = {
  name: 'definitions',
  visit: function visit(node, note) {
    if (node.type === 'definition') {
      note.definitions.push({
        label: node.label,
        url: node.url,
        title: node.title,
        range: astPositionToFoamRange(node.position)
      });
    }
  },
  onDidVisitTree: function onDidVisitTree(tree, note) {
    note.definitions = getFoamDefinitions(note.definitions, note.source.end);
  }
};

var handleError = function handleError(plugin, fnName, uri, e) {
  var name = plugin.name || '';
  Logger.warn("Error while executing [" + fnName + "] in plugin [" + name + "]. " + (uri ? 'for file [' + URI.toString(uri) : ']') + ".", e);
};

function createMarkdownParser(extraPlugins) {
  var parser = unified().use(markdownParse, {
    gfm: true
  }).use(frontmatterPlugin, ['yaml']).use(wikiLinkPlugin, {
    aliasDivider: ALIAS_DIVIDER_CHAR
  });
  var plugins = [titlePlugin, wikilinkPlugin, definitionsPlugin, tagsPlugin].concat(extraPlugins);
  plugins.forEach(function (plugin) {
    try {
      var _plugin$onDidInitiali;

      (_plugin$onDidInitiali = plugin.onDidInitializeParser) === null || _plugin$onDidInitiali === void 0 ? void 0 : _plugin$onDidInitiali.call(plugin, parser);
    } catch (e) {
      handleError(plugin, 'onDidInitializeParser', undefined, e);
    }
  });
  var foamParser = {
    parse: function parse(uri, markdown) {
      Logger.debug('Parsing:', URI.toString(uri));
      markdown = plugins.reduce(function (acc, plugin) {
        try {
          var _plugin$onWillParseMa;

          return ((_plugin$onWillParseMa = plugin.onWillParseMarkdown) === null || _plugin$onWillParseMa === void 0 ? void 0 : _plugin$onWillParseMa.call(plugin, acc)) || acc;
        } catch (e) {
          handleError(plugin, 'onWillParseMarkdown', uri, e);
          return acc;
        }
      }, markdown);
      var tree = parser.parse(markdown);
      var eol = detectNewline(markdown) || os.EOL;
      var note = {
        uri: uri,
        type: 'note',
        properties: {},
        title: '',
        tags: [],
        links: [],
        definitions: [],
        source: {
          text: markdown,
          contentStart: astPointToFoamPosition(tree.position.start),
          end: astPointToFoamPosition(tree.position.end),
          eol: eol
        }
      };
      plugins.forEach(function (plugin) {
        try {
          var _plugin$onWillVisitTr;

          (_plugin$onWillVisitTr = plugin.onWillVisitTree) === null || _plugin$onWillVisitTr === void 0 ? void 0 : _plugin$onWillVisitTr.call(plugin, tree, note);
        } catch (e) {
          handleError(plugin, 'onWillVisitTree', uri, e);
        }
      });
      visit(tree, function (node) {
        if (node.type === 'yaml') {
          try {
            var _parseYAML;

            var yamlProperties = (_parseYAML = yaml.parse(node.value)) !== null && _parseYAML !== void 0 ? _parseYAML : {};
            note.properties = _extends({}, note.properties, yamlProperties); // Update the start position of the note by exluding the metadata

            note.source.contentStart = Position.create(node.position.end.line + 2, 0);

            for (var i = 0, len = plugins.length; i < len; i++) {
              try {
                var _plugins$i$onDidFindP, _plugins$i;

                (_plugins$i$onDidFindP = (_plugins$i = plugins[i]).onDidFindProperties) === null || _plugins$i$onDidFindP === void 0 ? void 0 : _plugins$i$onDidFindP.call(_plugins$i, yamlProperties, note, node);
              } catch (e) {
                handleError(plugins[i], 'onDidFindProperties', uri, e);
              }
            }
          } catch (e) {
            Logger.warn("Error while parsing YAML for [" + URI.toString(uri) + "]", e);
          }
        }

        for (var _i = 0, _len = plugins.length; _i < _len; _i++) {
          try {
            var _plugins$_i$visit, _plugins$_i;

            (_plugins$_i$visit = (_plugins$_i = plugins[_i]).visit) === null || _plugins$_i$visit === void 0 ? void 0 : _plugins$_i$visit.call(_plugins$_i, node, note, markdown);
          } catch (e) {
            handleError(plugins[_i], 'visit', uri, e);
          }
        }
      });
      plugins.forEach(function (plugin) {
        try {
          var _plugin$onDidVisitTre;

          (_plugin$onDidVisitTre = plugin.onDidVisitTree) === null || _plugin$onDidVisitTre === void 0 ? void 0 : _plugin$onDidVisitTre.call(plugin, tree, note);
        } catch (e) {
          handleError(plugin, 'onDidVisitTree', uri, e);
        }
      });
      Logger.debug('Result:', note);
      return note;
    }
  };
  return foamParser;
}

function getFoamDefinitions(defs, fileEndPoint) {
  var previousLine = fileEndPoint.line;
  var foamDefinitions = []; // walk through each definition in reverse order
  // (last one first)

  for (var _iterator = _createForOfIteratorHelperLoose(defs.reverse()), _step; !(_step = _iterator()).done;) {
    var def = _step.value;
    // if this definition is more than 2 lines above the
    // previous one below it (or file end), that means we
    // have exited the trailing definition block, and should bail
    var start = def.range.start.line;

    if (start < previousLine - 2) {
      break;
    }

    foamDefinitions.unshift(def);
    previousLine = def.range.end.line;
  }

  return foamDefinitions;
}

function stringifyMarkdownLinkReferenceDefinition(definition) {
  var text = "[" + definition.label + "]: " + definition.url;

  if (definition.title) {
    text = text + " \"" + definition.title + "\"";
  }

  return text;
}
function createMarkdownReferences(workspace, noteUri, includeExtension) {
  var source = workspace.find(noteUri); // Should never occur since we're already in a file,

  if ((source === null || source === void 0 ? void 0 : source.type) !== 'note') {
    console.warn("Note " + URI.toString(noteUri) + " note found in workspace when attempting to generate markdown reference list");
    return [];
  }

  return source.links.filter(isWikilink).map(function (link) {
    var targetUri = workspace.resolveLink(source, link);
    var target = workspace.find(targetUri);

    if (isNone(target)) {
      Logger.warn("Link " + URI.toString(targetUri) + " in " + URI.toString(noteUri) + " is not valid.");
      return null;
    }

    if (target.type === 'placeholder') {
      // no need to create definitions for placeholders
      return null;
    }

    var relativePath = URI.relativePath(noteUri, target.uri);
    var pathToNote = includeExtension ? relativePath : dropExtension(relativePath); // [wikilink-text]: path/to/file.md "Page title"

    return {
      label: link.rawText.indexOf('[[') > -1 ? link.rawText.substring(2, link.rawText.length - 2) : link.rawText || link.label,
      url: pathToNote,
      title: target.title
    };
  }).filter(isSome).sort();
}
/**
 * Converts the 1-index Point object into the VS Code 0-index Position object
 * @param point ast Point (1-indexed)
 * @returns Foam Position  (0-indexed)
 */

var astPointToFoamPosition = function astPointToFoamPosition(point) {
  return Position.create(point.line - 1, point.column - 1);
};
/**
 * Converts the 1-index Position object into the VS Code 0-index Range object
 * @param position an ast Position object (1-indexed)
 * @returns Foam Range  (0-indexed)
 */


var astPositionToFoamRange = function astPositionToFoamRange(pos) {
  return Range.create(pos.start.line - 1, pos.start.column - 1, pos.end.line - 1, pos.end.column - 1);
};

var isWikilink = function isWikilink(link) {
  return link.type === 'wikilink';
};

var uriToSlug = function uriToSlug(uri) {
  return GithubSlugger.slug(URI.getBasename(uri));
};

var LINK_REFERENCE_DEFINITION_HEADER = "[//begin]: # \"Autogenerated link references for markdown compatibility\"";
var LINK_REFERENCE_DEFINITION_FOOTER = "[//end]: # \"Autogenerated link references\"";
var slugger = /*#__PURE__*/new GithubSlugger();
var generateLinkReferences = function generateLinkReferences(note, workspace, includeExtensions) {
  if (!note) {
    return null;
  }

  var markdownReferences = createMarkdownReferences(workspace, note.uri, includeExtensions);
  var newReferences = markdownReferences.length === 0 ? '' : [LINK_REFERENCE_DEFINITION_HEADER].concat(markdownReferences.map(stringifyMarkdownLinkReferenceDefinition), [LINK_REFERENCE_DEFINITION_FOOTER]).join(note.source.eol);

  if (note.definitions.length === 0) {
    if (newReferences.length === 0) {
      return null;
    }

    var padding = note.source.end.character === 0 ? note.source.eol : "" + note.source.eol + note.source.eol;
    return {
      newText: "" + padding + newReferences,
      range: Range.createFromPosition(note.source.end, note.source.end)
    };
  } else {
    var first = note.definitions[0];
    var last = note.definitions[note.definitions.length - 1];
    var oldReferences = note.definitions.map(stringifyMarkdownLinkReferenceDefinition).join(note.source.eol);

    if (oldReferences === newReferences) {
      return null;
    }

    return {
      // @todo: do we need to ensure new lines?
      newText: "" + newReferences,
      range: Range.createFromPosition(first.range.start, last.range.end)
    };
  }
};
var generateHeading = function generateHeading(note) {
  if (!note) {
    return null;
  } // TODO now the note.title defaults to file name at parsing time, so this check
  // doesn't work anymore. Decide:
  // - whether do we actually want to continue generate the headings
  // - whether it should be under a config option
  // A possible approach would be around having a `sections` field in the note, and inspect
  // it to see if there is an h1 title. Alternatively parse directly the markdown in this function.


  if (note.title) {
    return null;
  }

  var frontmatterExists = note.source.contentStart.line !== 1;
  var newLineExistsAfterFrontmatter = false;

  if (frontmatterExists) {
    var lines = note.source.text.split(note.source.eol);
    var index = note.source.contentStart.line - 1;
    var line = lines[index];
    newLineExistsAfterFrontmatter = line === '';
  }

  var paddingStart = frontmatterExists ? note.source.eol : '';
  var paddingEnd = newLineExistsAfterFrontmatter ? note.source.eol : "" + note.source.eol + note.source.eol;
  return {
    newText: paddingStart + "# " + getHeadingFromFileName(uriToSlug(note.uri)) + paddingEnd,
    range: Range.createFromPosition(note.source.contentStart, note.source.contentStart)
  };
};
/**
 *
 * @param fileName
 * @returns null if file name is already in kebab case otherise returns
 * the kebab cased file name
 */

var getKebabCaseFileName = function getKebabCaseFileName(fileName) {
  var kebabCasedFileName = slugger.slug(fileName);
  return kebabCasedFileName === fileName ? null : kebabCasedFileName;
};

/**
 *
 * @param text text on which the textEdit will be applied
 * @param textEdit
 * @returns {string} text with the applied textEdit
 */

var applyTextEdit = function applyTextEdit(text, textEdit) {
  var eol = detectNewline(text) || os.EOL;
  var lines = text.split(eol);
  var characters = text.split('');
  var startOffset = getOffset(lines, textEdit.range.start, eol);
  var endOffset = getOffset(lines, textEdit.range.end, eol);
  var deleteCount = endOffset - startOffset;
  var textToAppend = "" + textEdit.newText;
  characters.splice(startOffset, deleteCount, textToAppend);
  return characters.join('');
};

var getOffset = function getOffset(lines, position, eol) {
  var eolLen = eol.length;
  var offset = 0;
  var i = 0;

  while (i < position.line && i < lines.length) {
    offset = offset + lines[i].length + eolLen;
    i++;
  }

  return offset + Math.min(position.character, lines[i].length);
};

var DEFAULT_INCLUDES = ['**/*'];
var DEFAULT_IGNORES = ['**/node_modules/**'];
var createConfigFromObject = function createConfigFromObject(workspaceFolders, include, ignore, settings) {
  var config = {
    workspaceFolders: workspaceFolders,
    includeGlobs: include,
    ignoreGlobs: ignore,
    get: function get(path, defaultValue) {
      var tokens = path.split('.');
      var value = tokens.reduce(function (acc, t) {
        return acc === null || acc === void 0 ? void 0 : acc[t];
      }, settings);
      return value !== null && value !== void 0 ? value : defaultValue;
    }
  };
  return config;
};
var createConfigFromFolders = function createConfigFromFolders(workspaceFolders, options) {
  var _options$include, _options$ignore;

  if (options === void 0) {
    options = {};
  }

  if (!Array.isArray(workspaceFolders)) {
    workspaceFolders = [workspaceFolders];
  }

  var workspaceConfig = workspaceFolders.reduce(function (acc, f) {
    return lodash.merge(acc, parseConfig(URI.joinPath(f, 'config.json')));
  }, {}); // For security reasons local plugins can only be
  // activated via user config

  if ('experimental' in workspaceConfig) {
    delete workspaceConfig['experimental']['localPlugins'];
  }

  var userConfig = parseConfig(URI.file("~/.foam/config.json"));
  var settings = lodash.merge(workspaceConfig, userConfig);
  return createConfigFromObject(workspaceFolders, (_options$include = options.include) !== null && _options$include !== void 0 ? _options$include : DEFAULT_INCLUDES, (_options$ignore = options.ignore) !== null && _options$ignore !== void 0 ? _options$ignore : DEFAULT_IGNORES, settings);
};

var parseConfig = function parseConfig(path) {
  try {
    return JSON.parse(fs.readFileSync(URI.toFsPath(path), 'utf8'));
  } catch (_unused) {
    Logger.debug('Could not read configuration from ' + URI.toString(path));
  }
};

var bootstrap = function bootstrap(config, dataStore, initialProviders) {
  try {
    var parser = createMarkdownParser([]);
    var matcher = new Matcher(config.workspaceFolders, config.includeGlobs, config.ignoreGlobs);
    var workspace = new FoamWorkspace();
    return Promise.resolve(Promise.all(initialProviders.map(function (p) {
      return workspace.registerProvider(p);
    }))).then(function () {
      var graph = FoamGraph.fromWorkspace(workspace, true);
      var tags = FoamTags.fromWorkspace(workspace, true);
      var foam = {
        workspace: workspace,
        graph: graph,
        tags: tags,
        config: config,
        services: {
          dataStore: dataStore,
          parser: parser,
          matcher: matcher
        },
        dispose: function dispose() {
          workspace.dispose();
          graph.dispose();
        }
      };
      return foam;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

exports.BaseLogger = BaseLogger;
exports.Emitter = Emitter;
exports.FileDataStore = FileDataStore;
exports.FoamGraph = FoamGraph;
exports.FoamTags = FoamTags;
exports.FoamWorkspace = FoamWorkspace;
exports.LINK_REFERENCE_DEFINITION_FOOTER = LINK_REFERENCE_DEFINITION_FOOTER;
exports.LINK_REFERENCE_DEFINITION_HEADER = LINK_REFERENCE_DEFINITION_HEADER;
exports.Logger = Logger;
exports.MarkdownResourceProvider = MarkdownResourceProvider;
exports.Matcher = Matcher;
exports.Position = Position;
exports.Range = Range;
exports.Resource = Resource;
exports.URI = URI;
exports.applyTextEdit = applyTextEdit;
exports.bootstrap = bootstrap;
exports.createConfigFromFolders = createConfigFromFolders;
exports.createMarkdownParser = createMarkdownParser;
exports.createMarkdownReferences = createMarkdownReferences;
exports.generateHeading = generateHeading;
exports.generateLinkReferences = generateLinkReferences;
exports.getKebabCaseFileName = getKebabCaseFileName;
exports.isDisposable = isDisposable;
exports.stringifyMarkdownLinkReferenceDefinition = stringifyMarkdownLinkReferenceDefinition;
//# sourceMappingURL=foam-core.cjs.development.js.map
