#!/bin/sh

# For when keys break
alias archlinx-fix-keys="sudo pacman-key --init && sudo pacman-key --populate archlinux && sudo pacman-key --refresh-keys"

# NVIM
alias n="nvim"

# TMUX
alias tmux="TERM=xterm-256color tmux -2"

# Lua Scripts
export L="lua ~/.config/lua-scripts/lua-runner.lua"
alias l="$L"

  # Hot Reload Lua -- Pass File Name & Args
alias hrl="find . -name '*.lua' | entr lua " 

# mov to gif (Uses gifsicle as Dep, is not what I use on Arch) 
#  && gifsicle -O3 output.gif -o output.gif
alias video_to_gif='function video_to_gif(){ ffmpeg -i $1 output.gif};video_to_gif'

# Bash Scripts
# alias p='dirs=`envsubst < ~/projects` && dir=`echo "$dirs" | fzf` && cd "$dir"'
alias p='lua_cd od'
alias pv='l ov'
alias pn='lua_nvim od'
alias pt='lua_tmux od'
alias bc='better-commits'
alias bb='better-branch'
alias pw='npx nx e2e-deployment cx-cloud-e2e-pw -- --ui'
alias save_storage='npx playwright codegen http://localhost:4200 --save-storage=auth.json'
alias load_storage='npx playwright codegen --load-storage=auth.json http://localhost:4200/yrxqBHmPkNhZ60/success-track/default/track/today-view'
alias cases_glob='npx playwright codegen --load-storage=auth.json --save-har="./cases.har" --save-har-glob="**/api/edge/us/case/cxcp-cases-proxy/api/v1/cases/all?customerId=yrxqBHmPkNhZ60" http://localhost:4200/yrxqBHmPkNhZ60/success-track/default/track/today-view'
alias lhci='npx nx run cx-portal:serve:lhci'
alias perf='npx nx run cx-portal:serve:perf'
alias serial='echo -n "FCW2234D14Z" | pbcopy'
man_pw () {
  type pw
  type save_storage
  type load_storage
  type cases_glob
  type lhci
  type perf
  type serial
}

# DAC is part of the name of the speaker
# You could do this as 1 command, but you can't say get 1 character, because then it breaks on double digits
# i.e. redo this in lua
alias dac='var=$(pactl list sinks short | grep -i DAC)'
alias dacc='pactl set-default-sink ${var::1}'

# Misc
sv () { 
  dirs=$1
  cd ~/dev && npm create svelte@latest "$dirs" && cd "$dirs" && npm install
}
 


# TODO: Investigate $@ vs "$@" for N number of args
lua_cd () { cd $(l $1 $2) }
lua_nvim () { cd $(l $1 $2) && n }
vid_gif () { ffmpeg -i $1 -vf "fps=16,scale=828:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 $2 }
snail () {
 sudo xkeysnail config.py --quiet &
 export SNAIL_ID=$!
 sleep 3 & 
 wait $!
 xset r rate 210 40
 setxkbmap -option caps:escape
}

temp_test () {
 sleep 1 & 
 wait $!
 xset r rate 210 40
 setxkbmap -option caps:escape
}

# Learning
  # You probably don't need these as much as you think
  # exports will take effect inside of a child process.
  # e.g. if you use npm ci in that process, it has access to:
    # all of the parent shell variables
    # all of the current shell variables
  # So if you run `npm ci`, as long as you export auth in that current shell you're good
lua_export() { export $(l $1) }
lua_source() { source $(l $1) }

# Learning
  # This actually isn't necessary.
  # cd, source, export, etc... these are the commands you need to run in the current shell. tmux is fine.
  # tmux has a "send" command. What if we just did literally everything with tmux?
  # Would this have a sideffect of giving us ability to keybind all of our stuff?
  # DONE: Tmux everything does not work. A tmux.send command doesn't block the current thread like other commands do.
lua_tmux () { 
  dirs=$(l $1 $2)
  folder=$(l 'folder-name' $dirs)
  tmux new-window -c "$dirs" -n "$folder"
}

case "$(uname -s)" in

Darwin)
	# echo 'Mac OS X'
	alias ls='ls -G'
	;;

Linux)
	alias ls='ls --color=auto'
	;;

CYGWIN* | MINGW32* | MSYS* | MINGW*)
	# echo 'MS Windows'
	;;
*)
	# echo 'Other OS'
	;;
esac
